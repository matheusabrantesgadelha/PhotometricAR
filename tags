!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	glm/core/_swizzle.hpp	/^		A = 3,$/;"	e	enum:glm::comp
AR	bin/Makefile	/^AR            = ar cqs$/;"	m
ARDrawingContext	tracking/ARDrawingContext.cpp	/^ARDrawingContext::ARDrawingContext(std::string windowName, cv::Size frameSize, const CameraCalibration& c)$/;"	f	class:ARDrawingContext
ARDrawingContext	tracking/ARDrawingContext.hpp	/^class ARDrawingContext$/;"	c
ARDrawingContextDrawCallback	tracking/ARDrawingContext.cpp	/^void ARDrawingContextDrawCallback(void* param)$/;"	f
ARDrawingContext_HPP	tracking/ARDrawingContext.hpp	13;"	d
ARPIPELINE_HPP	tracking/ARPipeline.hpp	2;"	d
ARPipeline	tracking/ARPipeline.cpp	/^ARPipeline::ARPipeline($/;"	f	class:ARPipeline
ARPipeline	tracking/ARPipeline.cpp	/^ARPipeline::ARPipeline(const cv::Mat& patternImage, const CameraCalibration& calibration)$/;"	f	class:ARPipeline
ARPipeline	tracking/ARPipeline.hpp	/^class ARPipeline {$/;"	c
B	glm/core/_swizzle.hpp	/^		B = 2,$/;"	e	enum:glm::comp
BASECAMERA_H	rendering/BaseCamera.hpp	2;"	d
BASESHADER_H	rendering/BaseShader.hpp	2;"	d
BUFFER_OFFSET	tst/tst-render.cpp	22;"	d	file:
BaseCamera	rendering/BaseCamera.cpp	/^	BaseCamera::BaseCamera()$/;"	f	class:rendering::BaseCamera
BaseCamera	rendering/BaseCamera.hpp	/^    class BaseCamera {$/;"	c	namespace:rendering
BaseShader	rendering/BaseShader.cpp	/^	BaseShader::BaseShader( const char* _vert_filename, const char* _frag_filename )$/;"	f	class:rendering::BaseShader
BaseShader	rendering/BaseShader.cpp	/^	BaseShader::BaseShader()$/;"	f	class:rendering::BaseShader
BaseShader	rendering/BaseShader.hpp	/^    class BaseShader {$/;"	c	namespace:rendering
CC	bin/Makefile	/^CC            = gcc$/;"	m
CC	rendering/Makefile	/^CC = g++$/;"	m
CC	tracking/Makefile	/^CC = g++$/;"	m
CC	tst/Makefile	/^CC = g++$/;"	m
CFLAGS	bin/Makefile	/^CFLAGS        = -m64 -pipe -g -Wall -W -fPIE $(DEFINES)$/;"	m
CFLAGS	rendering/Makefile	/^CFLAGS = -Wall -msse4.2 -ggdb$/;"	m
CFLAGS	tracking/Makefile	/^CFLAGS = -Wall -ggdb$/;"	m
CFLAGS	tst/Makefile	/^CFLAGS = -Wall -msse4.2 -ggdb$/;"	m
CHK_DIR_EXISTS	bin/Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COMPRESS	bin/Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	bin/Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	bin/Makefile	/^COPY_DIR      = cp -f -R$/;"	m
COPY_FILE	bin/Makefile	/^COPY_FILE     = cp -f$/;"	m
CXX	bin/Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	bin/Makefile	/^CXXFLAGS      = -m64 -pipe -g -Wall -W -fPIE $(DEFINES)$/;"	m
CameraCalibration	tracking/CameraCalibration.cpp	/^CameraCalibration::CameraCalibration()$/;"	f	class:CameraCalibration
CameraCalibration	tracking/CameraCalibration.cpp	/^CameraCalibration::CameraCalibration(float _fx, float _fy, float _cx, float _cy)$/;"	f	class:CameraCalibration
CameraCalibration	tracking/CameraCalibration.cpp	/^CameraCalibration::CameraCalibration(float _fx, float _fy, float _cx, float _cy, float distorsionCoeff[5])$/;"	f	class:CameraCalibration
CameraCalibration	tracking/CameraCalibration.hpp	/^class CameraCalibration$/;"	c
DEBUG_HELPERS_HPP	tracking/DebugHelpers.hpp	13;"	d
DEBUG_MODE	tst/tst-render.cpp	21;"	d	file:
DEFINES	bin/Makefile	/^DEFINES       = -DQT_QML_DEBUG -DQT_DECLARATIVE_DEBUG$/;"	m
DEL_DIR	bin/Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	bin/Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	bin/Makefile	/^DESTDIR       = $/;"	m
DIST	bin/Makefile	/^DIST          = ..\/..\/..\/Qt5.0.1\/5.0.1\/gcc_64\/mkspecs\/features\/spec_pre.prf \\$/;"	m
DirectionalLightInfo	rendering/RenderingManager.hpp	/^    struct DirectionalLightInfo$/;"	s	namespace:rendering
EXAMPLE_MARKERLESS_AR_PATTERNDETECTOR_HPP	tracking/PatternDetector.hpp	13;"	d
EXAMPLE_MARKERLESS_AR_PATTERN_HPP	tracking/Pattern.hpp	13;"	d
Example_MarkerBasedAR_CameraCalibration_hpp	tracking/CameraCalibration.hpp	14;"	d
Example_MarkerBasedAR_GeometryTypes_hpp	tracking/GeometryTypes.hpp	13;"	d
FRAME_HEIGHT	tst/main.cpp	/^const int FRAME_HEIGHT = 720;$/;"	v
FRAME_WIDTH	tst/main.cpp	/^const int FRAME_WIDTH = 1280;$/;"	v
G	glm/core/_swizzle.hpp	/^		G = 1,$/;"	e	enum:glm::comp
GLM_ALIGN	glm/core/_detail.hpp	443;"	d
GLM_ALIGNED_STRUCT	glm/core/_detail.hpp	444;"	d
GLM_ARCH	glm/core/setup.hpp	486;"	d
GLM_ARCH	glm/core/setup.hpp	488;"	d
GLM_ARCH	glm/core/setup.hpp	490;"	d
GLM_ARCH	glm/core/setup.hpp	492;"	d
GLM_ARCH	glm/core/setup.hpp	494;"	d
GLM_ARCH	glm/core/setup.hpp	496;"	d
GLM_ARCH	glm/core/setup.hpp	499;"	d
GLM_ARCH	glm/core/setup.hpp	511;"	d
GLM_ARCH	glm/core/setup.hpp	514;"	d
GLM_ARCH	glm/core/setup.hpp	516;"	d
GLM_ARCH	glm/core/setup.hpp	519;"	d
GLM_ARCH	glm/core/setup.hpp	521;"	d
GLM_ARCH	glm/core/setup.hpp	523;"	d
GLM_ARCH	glm/core/setup.hpp	526;"	d
GLM_ARCH	glm/core/setup.hpp	528;"	d
GLM_ARCH	glm/core/setup.hpp	535;"	d
GLM_ARCH_AVX	glm/core/setup.hpp	482;"	d
GLM_ARCH_AVX2	glm/core/setup.hpp	483;"	d
GLM_ARCH_PURE	glm/core/setup.hpp	478;"	d
GLM_ARCH_SSE2	glm/core/setup.hpp	479;"	d
GLM_ARCH_SSE3	glm/core/setup.hpp	480;"	d
GLM_ARCH_SSE4	glm/core/setup.hpp	481;"	d
GLM_COMPILER	glm/core/setup.hpp	199;"	d
GLM_COMPILER	glm/core/setup.hpp	203;"	d
GLM_COMPILER	glm/core/setup.hpp	205;"	d
GLM_COMPILER	glm/core/setup.hpp	207;"	d
GLM_COMPILER	glm/core/setup.hpp	209;"	d
GLM_COMPILER	glm/core/setup.hpp	211;"	d
GLM_COMPILER	glm/core/setup.hpp	213;"	d
GLM_COMPILER	glm/core/setup.hpp	215;"	d
GLM_COMPILER	glm/core/setup.hpp	217;"	d
GLM_COMPILER	glm/core/setup.hpp	219;"	d
GLM_COMPILER	glm/core/setup.hpp	224;"	d
GLM_COMPILER	glm/core/setup.hpp	248;"	d
GLM_COMPILER	glm/core/setup.hpp	250;"	d
GLM_COMPILER	glm/core/setup.hpp	252;"	d
GLM_COMPILER	glm/core/setup.hpp	254;"	d
GLM_COMPILER	glm/core/setup.hpp	256;"	d
GLM_COMPILER	glm/core/setup.hpp	258;"	d
GLM_COMPILER	glm/core/setup.hpp	260;"	d
GLM_COMPILER	glm/core/setup.hpp	262;"	d
GLM_COMPILER	glm/core/setup.hpp	264;"	d
GLM_COMPILER	glm/core/setup.hpp	266;"	d
GLM_COMPILER	glm/core/setup.hpp	268;"	d
GLM_COMPILER	glm/core/setup.hpp	274;"	d
GLM_COMPILER	glm/core/setup.hpp	276;"	d
GLM_COMPILER	glm/core/setup.hpp	278;"	d
GLM_COMPILER	glm/core/setup.hpp	280;"	d
GLM_COMPILER	glm/core/setup.hpp	282;"	d
GLM_COMPILER	glm/core/setup.hpp	284;"	d
GLM_COMPILER	glm/core/setup.hpp	286;"	d
GLM_COMPILER	glm/core/setup.hpp	288;"	d
GLM_COMPILER	glm/core/setup.hpp	290;"	d
GLM_COMPILER	glm/core/setup.hpp	292;"	d
GLM_COMPILER	glm/core/setup.hpp	294;"	d
GLM_COMPILER	glm/core/setup.hpp	296;"	d
GLM_COMPILER	glm/core/setup.hpp	298;"	d
GLM_COMPILER	glm/core/setup.hpp	304;"	d
GLM_COMPILER	glm/core/setup.hpp	306;"	d
GLM_COMPILER	glm/core/setup.hpp	308;"	d
GLM_COMPILER	glm/core/setup.hpp	310;"	d
GLM_COMPILER	glm/core/setup.hpp	312;"	d
GLM_COMPILER	glm/core/setup.hpp	314;"	d
GLM_COMPILER	glm/core/setup.hpp	316;"	d
GLM_COMPILER	glm/core/setup.hpp	318;"	d
GLM_COMPILER	glm/core/setup.hpp	320;"	d
GLM_COMPILER	glm/core/setup.hpp	322;"	d
GLM_COMPILER	glm/core/setup.hpp	324;"	d
GLM_COMPILER	glm/core/setup.hpp	326;"	d
GLM_COMPILER	glm/core/setup.hpp	328;"	d
GLM_COMPILER	glm/core/setup.hpp	330;"	d
GLM_COMPILER	glm/core/setup.hpp	332;"	d
GLM_COMPILER	glm/core/setup.hpp	334;"	d
GLM_COMPILER	glm/core/setup.hpp	340;"	d
GLM_COMPILER	glm/core/setup.hpp	342;"	d
GLM_COMPILER	glm/core/setup.hpp	344;"	d
GLM_COMPILER	glm/core/setup.hpp	346;"	d
GLM_COMPILER	glm/core/setup.hpp	348;"	d
GLM_COMPILER	glm/core/setup.hpp	353;"	d
GLM_COMPILER	glm/core/setup.hpp	356;"	d
GLM_COMPILER_BC	glm/core/setup.hpp	145;"	d
GLM_COMPILER_BCB2009	glm/core/setup.hpp	150;"	d
GLM_COMPILER_BCB4	glm/core/setup.hpp	146;"	d
GLM_COMPILER_BCB5	glm/core/setup.hpp	147;"	d
GLM_COMPILER_BCB6	glm/core/setup.hpp	148;"	d
GLM_COMPILER_CLANG	glm/core/setup.hpp	165;"	d
GLM_COMPILER_CLANG26	glm/core/setup.hpp	166;"	d
GLM_COMPILER_CLANG27	glm/core/setup.hpp	167;"	d
GLM_COMPILER_CLANG28	glm/core/setup.hpp	168;"	d
GLM_COMPILER_CLANG29	glm/core/setup.hpp	169;"	d
GLM_COMPILER_CLANG30	glm/core/setup.hpp	170;"	d
GLM_COMPILER_CLANG31	glm/core/setup.hpp	171;"	d
GLM_COMPILER_CLANG32	glm/core/setup.hpp	172;"	d
GLM_COMPILER_CLANG33	glm/core/setup.hpp	173;"	d
GLM_COMPILER_CLANG40	glm/core/setup.hpp	174;"	d
GLM_COMPILER_CLANG41	glm/core/setup.hpp	175;"	d
GLM_COMPILER_CLANG42	glm/core/setup.hpp	176;"	d
GLM_COMPILER_CLANG43	glm/core/setup.hpp	177;"	d
GLM_COMPILER_CODEWARRIOR	glm/core/setup.hpp	153;"	d
GLM_COMPILER_CUDA	glm/core/setup.hpp	156;"	d
GLM_COMPILER_CUDA30	glm/core/setup.hpp	157;"	d
GLM_COMPILER_CUDA31	glm/core/setup.hpp	158;"	d
GLM_COMPILER_CUDA32	glm/core/setup.hpp	159;"	d
GLM_COMPILER_CUDA40	glm/core/setup.hpp	160;"	d
GLM_COMPILER_CUDA41	glm/core/setup.hpp	161;"	d
GLM_COMPILER_CUDA42	glm/core/setup.hpp	162;"	d
GLM_COMPILER_GCC	glm/core/setup.hpp	120;"	d
GLM_COMPILER_GCC30	glm/core/setup.hpp	123;"	d
GLM_COMPILER_GCC31	glm/core/setup.hpp	124;"	d
GLM_COMPILER_GCC32	glm/core/setup.hpp	125;"	d
GLM_COMPILER_GCC33	glm/core/setup.hpp	126;"	d
GLM_COMPILER_GCC34	glm/core/setup.hpp	127;"	d
GLM_COMPILER_GCC35	glm/core/setup.hpp	128;"	d
GLM_COMPILER_GCC40	glm/core/setup.hpp	129;"	d
GLM_COMPILER_GCC41	glm/core/setup.hpp	130;"	d
GLM_COMPILER_GCC42	glm/core/setup.hpp	131;"	d
GLM_COMPILER_GCC43	glm/core/setup.hpp	132;"	d
GLM_COMPILER_GCC44	glm/core/setup.hpp	133;"	d
GLM_COMPILER_GCC45	glm/core/setup.hpp	134;"	d
GLM_COMPILER_GCC46	glm/core/setup.hpp	135;"	d
GLM_COMPILER_GCC47	glm/core/setup.hpp	136;"	d
GLM_COMPILER_GCC48	glm/core/setup.hpp	137;"	d
GLM_COMPILER_GCC49	glm/core/setup.hpp	138;"	d
GLM_COMPILER_GCC50	glm/core/setup.hpp	139;"	d
GLM_COMPILER_GCC_CLANG	glm/core/setup.hpp	122;"	d
GLM_COMPILER_GCC_LLVM	glm/core/setup.hpp	121;"	d
GLM_COMPILER_INTEL	glm/core/setup.hpp	183;"	d
GLM_COMPILER_INTEL10_0	glm/core/setup.hpp	185;"	d
GLM_COMPILER_INTEL10_1	glm/core/setup.hpp	186;"	d
GLM_COMPILER_INTEL11_0	glm/core/setup.hpp	187;"	d
GLM_COMPILER_INTEL11_1	glm/core/setup.hpp	188;"	d
GLM_COMPILER_INTEL12_0	glm/core/setup.hpp	189;"	d
GLM_COMPILER_INTEL12_1	glm/core/setup.hpp	190;"	d
GLM_COMPILER_INTEL13_0	glm/core/setup.hpp	191;"	d
GLM_COMPILER_INTEL9	glm/core/setup.hpp	184;"	d
GLM_COMPILER_LLVM_GCC	glm/core/setup.hpp	180;"	d
GLM_COMPILER_UNKNOWN	glm/core/setup.hpp	104;"	d
GLM_COMPILER_VC	glm/core/setup.hpp	107;"	d
GLM_COMPILER_VC2	glm/core/setup.hpp	108;"	d
GLM_COMPILER_VC2002	glm/core/setup.hpp	112;"	d
GLM_COMPILER_VC2003	glm/core/setup.hpp	113;"	d
GLM_COMPILER_VC2005	glm/core/setup.hpp	114;"	d
GLM_COMPILER_VC2008	glm/core/setup.hpp	115;"	d
GLM_COMPILER_VC2010	glm/core/setup.hpp	116;"	d
GLM_COMPILER_VC2012	glm/core/setup.hpp	117;"	d
GLM_COMPILER_VC4	glm/core/setup.hpp	109;"	d
GLM_COMPILER_VC5	glm/core/setup.hpp	110;"	d
GLM_COMPILER_VC6	glm/core/setup.hpp	111;"	d
GLM_COMPONENT	glm/core/setup.hpp	606;"	d
GLM_COMPONENT	glm/core/setup.hpp	608;"	d
GLM_COMPONENT	glm/core/setup.hpp	610;"	d
GLM_COMPONENT_CXX11	glm/core/setup.hpp	603;"	d
GLM_COMPONENT_CXX98	glm/core/setup.hpp	602;"	d
GLM_COMPONENT_ONLY_XYZW	glm/core/setup.hpp	601;"	d
GLM_CONSTEXPR	glm/core/_detail.hpp	447;"	d
GLM_CORE_func_common	glm/core/func_common.hpp	37;"	d
GLM_CORE_func_matrix	glm/core/func_matrix.hpp	41;"	d
GLM_CORE_func_packing	glm/core/func_packing.hpp	37;"	d
GLM_CORE_func_trigonometric	glm/core/func_trigonometric.hpp	41;"	d
GLM_CORE_func_vector_relational	glm/core/func_vector_relational.hpp	42;"	d
GLM_CUDA_FUNC_DECL	glm/core/setup.hpp	652;"	d
GLM_CUDA_FUNC_DECL	glm/core/setup.hpp	655;"	d
GLM_CUDA_FUNC_DEF	glm/core/setup.hpp	651;"	d
GLM_CUDA_FUNC_DEF	glm/core/setup.hpp	654;"	d
GLM_DEPRECATED	glm/core/_detail.hpp	442;"	d
GLM_DETAIL_IS_FLOAT	glm/core/_detail.hpp	234;"	d
GLM_DETAIL_IS_INT	glm/core/_detail.hpp	184;"	d
GLM_DETAIL_IS_MATRIX	glm/core/_detail.hpp	310;"	d
GLM_DETAIL_IS_UINT	glm/core/_detail.hpp	208;"	d
GLM_DETAIL_IS_VECTOR	glm/core/_detail.hpp	286;"	d
GLM_ERROR	glm/core/_detail.hpp	/^			GLM_ERROR,$/;"	e	enum:glm::detail::float_or_int_value::__anon25
GLM_FLOAT	glm/core/_detail.hpp	/^			GLM_FLOAT,$/;"	e	enum:glm::detail::float_or_int_value::__anon25
GLM_FUNC_DECL	glm/core/setup.hpp	678;"	d
GLM_FUNC_QUALIFIER	glm/core/setup.hpp	679;"	d
GLM_GTC_constants	glm/gtc/constants.hpp	40;"	d
GLM_GTC_epsilon	glm/gtc/epsilon.hpp	41;"	d
GLM_GTC_half_float	glm/gtc/half_float.hpp	38;"	d
GLM_GTC_matrix_access	glm/gtc/matrix_access.hpp	38;"	d
GLM_GTC_matrix_integer	glm/gtc/matrix_integer.hpp	38;"	d
GLM_GTC_matrix_inverse	glm/gtc/matrix_inverse.hpp	38;"	d
GLM_GTC_matrix_transform	glm/gtc/matrix_transform.hpp	47;"	d
GLM_GTC_noise	glm/gtc/noise.hpp	42;"	d
GLM_GTC_quaternion	glm/gtc/quaternion.hpp	41;"	d
GLM_GTC_random	glm/gtc/random.hpp	41;"	d
GLM_GTC_reciprocal	glm/gtc/reciprocal.hpp	39;"	d
GLM_GTC_swizzle	glm/gtc/swizzle.hpp	39;"	d
GLM_GTC_type_precision	glm/gtc/type_precision.hpp	44;"	d
GLM_GTC_type_ptr	glm/gtc/type_ptr.hpp	60;"	d
GLM_GTC_ulp	glm/gtc/ulp.hpp	40;"	d
GLM_GTX_associated_min_max	glm/gtx/associated_min_max.hpp	39;"	d
GLM_GTX_bit	glm/gtx/bit.hpp	40;"	d
GLM_GTX_closest_point	glm/gtx/closest_point.hpp	39;"	d
GLM_GTX_color_cast	glm/gtx/color_cast.hpp	40;"	d
GLM_GTX_color_space	glm/gtx/color_space.hpp	39;"	d
GLM_GTX_compatibility	glm/gtx/compatibility.hpp	40;"	d
GLM_GTX_component_wise	glm/gtx/component_wise.hpp	39;"	d
GLM_GTX_constants	glm/gtx/constants.hpp	25;"	d
GLM_GTX_euler_angles	glm/gtx/euler_angles.hpp	40;"	d
GLM_GTX_extend	glm/gtx/extend.hpp	39;"	d
GLM_GTX_extented_min_max	glm/gtx/extented_min_max.hpp	40;"	d
GLM_GTX_fast_exponential	glm/gtx/fast_exponential.hpp	40;"	d
GLM_GTX_fast_square_root	glm/gtx/fast_square_root.hpp	41;"	d
GLM_GTX_fast_trigonometry	glm/gtx/fast_trigonometry.hpp	39;"	d
GLM_GTX_gradient_paint	glm/gtx/gradient_paint.hpp	39;"	d
GLM_GTX_handed_coordinate_space	glm/gtx/handed_coordinate_space.hpp	39;"	d
GLM_GTX_inertia	glm/gtx/inertia.hpp	40;"	d
GLM_GTX_int_10_10_10_2	glm/gtx/int_10_10_10_2.hpp	40;"	d
GLM_GTX_integer	glm/gtx/integer.hpp	39;"	d
GLM_GTX_intersect	glm/gtx/intersect.hpp	40;"	d
GLM_GTX_log_base	glm/gtx/log_base.hpp	39;"	d
GLM_GTX_matrix_cross_product	glm/gtx/matrix_cross_product.hpp	40;"	d
GLM_GTX_matrix_interpolation	glm/gtx/matrix_interpolation.hpp	39;"	d
GLM_GTX_matrix_major_storage	glm/gtx/matrix_major_storage.hpp	40;"	d
GLM_GTX_matrix_operation	glm/gtx/matrix_operation.hpp	39;"	d
GLM_GTX_matrix_query	glm/gtx/matrix_query.hpp	40;"	d
GLM_GTX_mixed_product	glm/gtx/mixed_product.hpp	39;"	d
GLM_GTX_multiple	glm/gtx/multiple.hpp	40;"	d
GLM_GTX_norm	glm/gtx/norm.hpp	40;"	d
GLM_GTX_normal	glm/gtx/normal.hpp	40;"	d
GLM_GTX_normalize_dot	glm/gtx/normalize_dot.hpp	40;"	d
GLM_GTX_number_precision	glm/gtx/number_precision.hpp	41;"	d
GLM_GTX_ocl_type	glm/gtx/ocl_type.hpp	40;"	d
GLM_GTX_optimum_pow	glm/gtx/optimum_pow.hpp	39;"	d
GLM_GTX_orthonormalize	glm/gtx/orthonormalize.hpp	40;"	d
GLM_GTX_perpendicular	glm/gtx/perpendicular.hpp	40;"	d
GLM_GTX_polar_coordinates	glm/gtx/polar_coordinates.hpp	39;"	d
GLM_GTX_projection	glm/gtx/projection.hpp	39;"	d
GLM_GTX_quaternion	glm/gtx/quaternion.hpp	40;"	d
GLM_GTX_raw_data	glm/gtx/raw_data.hpp	39;"	d
GLM_GTX_rotate_vector	glm/gtx/rotate_vector.hpp	40;"	d
GLM_GTX_simd_mat4	glm/gtx/simd_mat4.hpp	39;"	d
GLM_GTX_simd_vec4	glm/gtx/simd_vec4.hpp	39;"	d
GLM_GTX_spline	glm/gtx/spline.hpp	39;"	d
GLM_GTX_std_based_type	glm/gtx/std_based_type.hpp	39;"	d
GLM_GTX_string_cast	glm/gtx/string_cast.hpp	42;"	d
GLM_GTX_transform	glm/gtx/transform.hpp	42;"	d
GLM_GTX_transform2	glm/gtx/transform2.hpp	40;"	d
GLM_GTX_vec1	glm/gtx/vec1.hpp	38;"	d
GLM_GTX_vector_access	glm/gtx/vector_access.hpp	39;"	d
GLM_GTX_vector_angle	glm/gtx/vector_angle.hpp	41;"	d
GLM_GTX_vector_query	glm/gtx/vector_query.hpp	39;"	d
GLM_GTX_verbose_operator	glm/gtx/verbose_operator.hpp	39;"	d
GLM_GTX_wrap	glm/gtx/wrap.hpp	39;"	d
GLM_INLINE	glm/core/setup.hpp	666;"	d
GLM_INLINE	glm/core/setup.hpp	668;"	d
GLM_INLINE	glm/core/setup.hpp	670;"	d
GLM_INLINE	glm/core/setup.hpp	672;"	d
GLM_INLINE	glm/core/setup.hpp	675;"	d
GLM_INT	glm/core/_detail.hpp	/^			GLM_INT$/;"	e	enum:glm::detail::float_or_int_value::__anon25
GLM_LANG	glm/core/setup.hpp	429;"	d
GLM_LANG	glm/core/setup.hpp	431;"	d
GLM_LANG	glm/core/setup.hpp	433;"	d
GLM_LANG	glm/core/setup.hpp	436;"	d
GLM_LANG	glm/core/setup.hpp	438;"	d
GLM_LANG	glm/core/setup.hpp	440;"	d
GLM_LANG	glm/core/setup.hpp	443;"	d
GLM_LANG	glm/core/setup.hpp	445;"	d
GLM_LANG	glm/core/setup.hpp	448;"	d
GLM_LANG	glm/core/setup.hpp	450;"	d
GLM_LANG_CXX	glm/core/setup.hpp	420;"	d
GLM_LANG_CXX03	glm/core/setup.hpp	422;"	d
GLM_LANG_CXX0X	glm/core/setup.hpp	423;"	d
GLM_LANG_CXX11	glm/core/setup.hpp	424;"	d
GLM_LANG_CXX98	glm/core/setup.hpp	421;"	d
GLM_LANG_CXXGNU	glm/core/setup.hpp	426;"	d
GLM_LANG_CXXMS	glm/core/setup.hpp	425;"	d
GLM_MESSAGES	glm/core/dummy.cpp	32;"	d	file:
GLM_MESSAGE_ARCH_DISPLAYED	glm/core/setup.hpp	564;"	d
GLM_MESSAGE_COMPILER_DISPLAYED	glm/core/setup.hpp	365;"	d
GLM_MESSAGE_COMPONENT_DISPLAYED	glm/core/setup.hpp	614;"	d
GLM_MESSAGE_CORE_INCLUDED_DISPLAYED	glm/glm.hpp	92;"	d
GLM_MESSAGE_EXT_INCLUDED_DISPLAYED	glm/ext.hpp	62;"	d
GLM_MESSAGE_LANG_DISPLAYED	glm/core/setup.hpp	455;"	d
GLM_MESSAGE_MODEL_DISPLAYED	glm/core/setup.hpp	407;"	d
GLM_MESSAGE_PLATFORM_DISPLAYED	glm/core/setup.hpp	76;"	d
GLM_MESSAGE_SWIZZLE_DISPLAYED	glm/core/setup.hpp	687;"	d
GLM_MODEL	glm/core/setup.hpp	395;"	d
GLM_MODEL	glm/core/setup.hpp	397;"	d
GLM_MODEL	glm/core/setup.hpp	399;"	d
GLM_MODEL_32	glm/core/setup.hpp	194;"	d
GLM_MODEL_64	glm/core/setup.hpp	195;"	d
GLM_MUTABLE	glm/core/_swizzle_func.hpp	71;"	d
GLM_PLATFORM	glm/core/setup.hpp	55;"	d
GLM_PLATFORM	glm/core/setup.hpp	57;"	d
GLM_PLATFORM	glm/core/setup.hpp	59;"	d
GLM_PLATFORM	glm/core/setup.hpp	61;"	d
GLM_PLATFORM	glm/core/setup.hpp	63;"	d
GLM_PLATFORM	glm/core/setup.hpp	65;"	d
GLM_PLATFORM	glm/core/setup.hpp	67;"	d
GLM_PLATFORM	glm/core/setup.hpp	69;"	d
GLM_PLATFORM	glm/core/setup.hpp	71;"	d
GLM_PLATFORM_ANDROID	glm/core/setup.hpp	49;"	d
GLM_PLATFORM_APPLE	glm/core/setup.hpp	47;"	d
GLM_PLATFORM_CHROME_NACL	glm/core/setup.hpp	50;"	d
GLM_PLATFORM_LINUX	glm/core/setup.hpp	46;"	d
GLM_PLATFORM_QNXNTO	glm/core/setup.hpp	52;"	d
GLM_PLATFORM_UNIX	glm/core/setup.hpp	51;"	d
GLM_PLATFORM_UNKNOWN	glm/core/setup.hpp	44;"	d
GLM_PLATFORM_WINDOWS	glm/core/setup.hpp	45;"	d
GLM_RESTRICT	glm/core/_detail.hpp	445;"	d
GLM_RESTRICT_VAR	glm/core/_detail.hpp	446;"	d
GLM_STATIC_ASSERT	glm/core/setup.hpp	635;"	d
GLM_STATIC_ASSERT	glm/core/setup.hpp	637;"	d
GLM_STATIC_ASSERT	glm/core/setup.hpp	639;"	d
GLM_STATIC_ASSERT	glm/core/setup.hpp	641;"	d
GLM_STATIC_ASSERT_NULL	glm/core/setup.hpp	642;"	d
GLM_SUPPORT_ANONYMOUS_UNION	glm/core/setup.hpp	583;"	d
GLM_SUPPORT_ANONYMOUS_UNION_OF_STRUCTURE	glm/core/setup.hpp	589;"	d
GLM_SUPPORT_SWIZZLE_FUNCTION	glm/core/setup.hpp	595;"	d
GLM_SUPPORT_SWIZZLE_OPERATOR	glm/core/setup.hpp	592;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE	glm/core/_swizzle_func.hpp	73;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE	glm/core/_swizzle_func.hpp	84;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE	glm/core/_swizzle_func.hpp	111;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE	glm/core/_swizzle_func.hpp	92;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE	glm/core/_swizzle_func.hpp	125;"	d
GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE	glm/core/_swizzle_func.hpp	151;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC2	glm/core/_swizzle_func.hpp	77;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3	glm/core/_swizzle_func.hpp	104;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP	glm/core/_swizzle_func.hpp	100;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4	glm/core/_swizzle_func.hpp	182;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP	glm/core/_swizzle_func.hpp	177;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY	glm/core/_swizzle_func.hpp	32;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF	glm/core/_swizzle_func.hpp	50;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE	glm/core/_swizzle_func.hpp	189;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE	glm/core/_swizzle_func.hpp	235;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE	glm/core/_swizzle_func.hpp	433;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY	glm/core/_swizzle_func.hpp	38;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF	glm/core/_swizzle_func.hpp	57;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE	glm/core/_swizzle_func.hpp	195;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE	glm/core/_swizzle_func.hpp	246;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE	glm/core/_swizzle_func.hpp	451;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY	glm/core/_swizzle_func.hpp	44;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF	glm/core/_swizzle_func.hpp	64;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE	glm/core/_swizzle_func.hpp	205;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE	glm/core/_swizzle_func.hpp	275;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE	glm/core/_swizzle_func.hpp	517;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2	glm/core/_swizzle_func.hpp	228;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP	glm/core/_swizzle_func.hpp	223;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3	glm/core/_swizzle_func.hpp	426;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP	glm/core/_swizzle_func.hpp	421;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4	glm/core/_swizzle_func.hpp	780;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP	glm/core/_swizzle_func.hpp	775;"	d
GLM_VAR_USED	glm/core/setup.hpp	659;"	d
GLM_VAR_USED	glm/core/setup.hpp	661;"	d
GLM_VERSION	glm/core/setup.hpp	35;"	d
GLM_VERSION_MAJOR	glm/core/setup.hpp	36;"	d
GLM_VERSION_MINOR	glm/core/setup.hpp	37;"	d
GLM_VERSION_PATCH	glm/core/setup.hpp	38;"	d
GLM_VERSION_REVISION	glm/core/setup.hpp	39;"	d
GLM_VIRTREV_xstream	glm/virtrev/xstream.hpp	40;"	d
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_ERROR};$/;"	e	enum:glm::detail::float_or_int_trait::__anon26
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_FLOAT};$/;"	e	enum:glm::detail::float_or_int_trait::__anon35
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_FLOAT};$/;"	e	enum:glm::detail::float_or_int_trait::__anon36
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_FLOAT};$/;"	e	enum:glm::detail::float_or_int_trait::__anon37
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_INT};$/;"	e	enum:glm::detail::float_or_int_trait::__anon27
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_INT};$/;"	e	enum:glm::detail::float_or_int_trait::__anon28
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_INT};$/;"	e	enum:glm::detail::float_or_int_trait::__anon29
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_INT};$/;"	e	enum:glm::detail::float_or_int_trait::__anon30
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_INT};$/;"	e	enum:glm::detail::float_or_int_trait::__anon31
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_INT};$/;"	e	enum:glm::detail::float_or_int_trait::__anon32
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_INT};$/;"	e	enum:glm::detail::float_or_int_trait::__anon33
ID	glm/core/_detail.hpp	/^		enum{ID = float_or_int_value::GLM_INT};$/;"	e	enum:glm::detail::float_or_int_trait::__anon34
INCLUDES	tst/Makefile	/^INCLUDES = -I..\/tracking -I..\/rendering	-I..\/glm -I$(IrrlichtHome)\/include -I\/usr\/X11R6\/include$/;"	m
INCPATH	bin/Makefile	/^INCPATH       = -I..\/..\/..\/Qt5.0.1\/5.0.1\/gcc_64\/mkspecs\/linux-g++-64 -I..\/PhotometricAR -I.$/;"	m
INC_DIR_GLM	rendering/Makefile	/^INC_DIR_GLM = -I..\/glm$/;"	m
INC_DIR_GLM	tracking/Makefile	/^INC_DIR_GLM = -I..\/glm$/;"	m
INSTALL_DIR	bin/Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	bin/Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	bin/Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
If	glm/core/_detail.hpp	/^	struct If$/;"	s	namespace:glm::detail
If	glm/core/_detail.hpp	/^	struct If<false>$/;"	s	namespace:glm::detail
IlluminationWindow	tst/main.cpp	/^    IlluminationWindow() : RenderingWindow("Illumination Test", FRAME_WIDTH, FRAME_HEIGHT)$/;"	f	class:IlluminationWindow
IlluminationWindow	tst/main.cpp	/^class IlluminationWindow : public RenderingWindow {$/;"	c	file:
IlluminationWindow	tst/tst-render.cpp	/^		IlluminationWindow() : RenderingWindow( "Illumination Test", 800, 600 )$/;"	f	class:IlluminationWindow
IlluminationWindow	tst/tst-render.cpp	/^class IlluminationWindow : public RenderingWindow$/;"	c	file:
LFLAGS	bin/Makefile	/^LFLAGS        = -m64 -Wl,-rpath,\/home\/matheus\/Qt5.0.1\/5.0.1\/gcc_64$/;"	m
LIBS	bin/Makefile	/^LIBS          = $(SUBLIBS)  $/;"	m
LIB_DIR	tst/Makefile	/^LIB_DIR = -L..\/lib\/ -L$(IrrlichtHome)\/lib\/Linux -L\/usr\/X11R6\/lib64$/;"	m
LINK	bin/Makefile	/^LINK          = g++$/;"	m
LS	tst/Makefile	/^LS = -ltrack -lrender$/;"	m
MAKEFILE	bin/Makefile	/^MAKEFILE      = Makefile$/;"	m
MARKERMESH_HPP	rendering/MarkerMesh.hpp	9;"	d
MESH_H	rendering/Mesh.hpp	2;"	d
MKDIR	bin/Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	bin/Makefile	/^MOVE          = mv -f$/;"	m
MarkerMesh	rendering/MarkerMesh.cpp	/^    MarkerMesh::MarkerMesh() :$/;"	f	class:rendering::MarkerMesh
MarkerMesh	rendering/MarkerMesh.hpp	/^    class MarkerMesh : public Mesh {$/;"	c	namespace:rendering
Matrix33	tracking/GeometryTypes.hpp	/^struct Matrix33$/;"	s
Matrix44	tracking/GeometryTypes.hpp	/^struct Matrix44$/;"	s
Mesh	rendering/Mesh.cpp	/^    Mesh::Mesh() : RenderableObject() {$/;"	f	class:rendering::Mesh
Mesh	rendering/Mesh.hpp	/^    class Mesh : public RenderableObject {$/;"	c	namespace:rendering
MinimalOgre	tst/MinimalOgre.h	/^class MinimalOgre : public Ogre::FrameListener, public Ogre::WindowEventListener, public OIS::KeyListener, public OIS::MouseListener$/;"	c
MyEventReceiver	tst/irrlicht_render.cpp	/^class MyEventReceiver : public IEventReceiver$/;"	c	file:
OBJECTS	bin/Makefile	/^OBJECTS       = Tracker.o \\$/;"	m
OBJECTS_DIR	bin/Makefile	/^OBJECTS_DIR   = .\/$/;"	m
OIS_DYNAMIC_LIB	tst/MinimalOgre.cpp	10;"	d	file:
OPENCV	rendering/Makefile	/^OPENCV = $(OPENCV_LS) $(OPENCV_INCLUDES)$/;"	m
OPENCV	tracking/Makefile	/^OPENCV = $(OPENCV_LS) $(OPENCV_INCLUDES)$/;"	m
OPENCV	tst/Makefile	/^OPENCV = $(OPENCV_LS) $(OPENCV_INCLUDES)$/;"	m
OPENCV_INCLUDES	rendering/Makefile	/^OPENCV_INCLUDES = -I\/usr\/local\/include\/opencv2 -I\/usr\/local\/include$/;"	m
OPENCV_INCLUDES	tracking/Makefile	/^OPENCV_INCLUDES = -I\/usr\/local\/include\/opencv2 -I\/usr\/local\/include$/;"	m
OPENCV_INCLUDES	tst/Makefile	/^OPENCV_INCLUDES = -I\/usr\/local\/include\/opencv2 -I\/usr\/local\/include -I$(IrrlichtHome)\/include$/;"	m
OPENCV_LS	rendering/Makefile	/^OPENCV_LS = -lopencv_calib3d -lopencv_contrib -lopencv_core -lopencv_features2d -lopencv_flann -lopencv_highgui -lopencv_imgproc -lopencv_legacy -lopencv_ml -lopencv_objdetect -lopencv_video$/;"	m
OPENCV_LS	tracking/Makefile	/^OPENCV_LS = -lopencv_calib3d -lopencv_contrib -lopencv_core -lopencv_features2d -lopencv_flann -lopencv_highgui -lopencv_imgproc -lopencv_legacy -lopencv_ml -lopencv_objdetect -lopencv_video$/;"	m
OPENCV_LS	tst/Makefile	/^OPENCV_LS = -lopencv_calib3d -lopencv_contrib -lopencv_core -lopencv_features2d -lopencv_flann -lopencv_highgui -lopencv_imgproc -lopencv_legacy -lopencv_ml -lopencv_objdetect -lopencv_video$/;"	m
OPENCV_SO	rendering/Makefile	/^OPENCV_SO = \/usr\/local\/lib\/libopencv_calib3d.so \/usr\/local\/lib\/libopencv_contrib.so \/usr\/local\/lib\/libopencv_core.so \/usr\/local\/lib\/libopencv_features2d.so \/usr\/local\/lib\/libopencv_flann.so \/usr\/local\/lib\/libopencv_gpu.so \/usr\/local\/lib\/libopencv_highgui.so \/usr\/local\/lib\/libopencv_imgproc.so \/usr\/local\/lib\/libopencv_legacy.so \/usr\/local\/lib\/libopencv_ml.so \/usr\/local\/lib\/libopencv_nonfree.so \/usr\/local\/lib\/libopencv_objdetect.so \/usr\/local\/lib\/libopencv_photo.so \/usr\/local\/lib\/libopencv_stitching.so \/usr\/local\/lib\/libopencv_ts.so \/usr\/local\/lib\/libopencv_video.so \/usr\/local\/lib\/libopencv_videostab.so$/;"	m
OPENCV_SO	tracking/Makefile	/^OPENCV_SO = \/usr\/local\/lib\/libopencv_calib3d.so \/usr\/local\/lib\/libopencv_contrib.so \/usr\/local\/lib\/libopencv_core.so \/usr\/local\/lib\/libopencv_features2d.so \/usr\/local\/lib\/libopencv_flann.so \/usr\/local\/lib\/libopencv_gpu.so \/usr\/local\/lib\/libopencv_highgui.so \/usr\/local\/lib\/libopencv_imgproc.so \/usr\/local\/lib\/libopencv_legacy.so \/usr\/local\/lib\/libopencv_ml.so \/usr\/local\/lib\/libopencv_nonfree.so \/usr\/local\/lib\/libopencv_objdetect.so \/usr\/local\/lib\/libopencv_photo.so \/usr\/local\/lib\/libopencv_stitching.so \/usr\/local\/lib\/libopencv_ts.so \/usr\/local\/lib\/libopencv_video.so \/usr\/local\/lib\/libopencv_videostab.so$/;"	m
OPENCV_SO	tst/Makefile	/^OPENCV_SO = \/usr\/local\/lib\/libopencv_calib3d.so \/usr\/local\/lib\/libopencv_contrib.so \/usr\/local\/lib\/libopencv_core.so \/usr\/local\/lib\/libopencv_features2d.so \/usr\/local\/lib\/libopencv_flann.so \/usr\/local\/lib\/libopencv_gpu.so \/usr\/local\/lib\/libopencv_highgui.so \/usr\/local\/lib\/libopencv_imgproc.so \/usr\/local\/lib\/libopencv_legacy.so \/usr\/local\/lib\/libopencv_ml.so \/usr\/local\/lib\/libopencv_nonfree.so \/usr\/local\/lib\/libopencv_objdetect.so \/usr\/local\/lib\/libopencv_photo.so \/usr\/local\/lib\/libopencv_stitching.so \/usr\/local\/lib\/libopencv_ts.so \/usr\/local\/lib\/libopencv_video.so \/usr\/local\/lib\/libopencv_videostab.so$/;"	m
OPENGL_LS	rendering/Makefile	/^OPENGL_LS = -lGL -lGLEW -lglut$/;"	m
OPENGL_LS	tracking/Makefile	/^OPENGL_LS = -lGL -lGLEW -lglut$/;"	m
OPENGL_LS	tst/Makefile	/^OPENGL_LS = -lGL -lGLEW -lglut$/;"	m
OnEvent	tst/irrlicht_render.cpp	/^    virtual bool OnEvent(const SEvent& event)$/;"	f	class:MyEventReceiver
P	glm/core/_swizzle.hpp	/^		P = 2,$/;"	e	enum:glm::comp
Pattern	tracking/Pattern.hpp	/^struct Pattern$/;"	s
PatternDetector	tracking/PatternDetector.cpp	/^PatternDetector::PatternDetector(cv::Ptr<cv::FeatureDetector> detector,$/;"	f	class:PatternDetector
PatternDetector	tracking/PatternDetector.hpp	/^class PatternDetector$/;"	c
PatternTrackingInfo	tracking/Pattern.hpp	/^struct PatternTrackingInfo$/;"	s
Q	glm/core/_swizzle.hpp	/^		Q = 3$/;"	e	enum:glm::comp
QMAKE	bin/Makefile	/^QMAKE         = \/home\/matheus\/Qt5.0.1\/5.0.1\/gcc_64\/bin\/qmake$/;"	m
QMAKE_TARGET	bin/Makefile	/^QMAKE_TARGET  = PhotometricAR$/;"	m
R	glm/core/_swizzle.hpp	/^		R = 0,$/;"	e	enum:glm::comp
RANLIB	bin/Makefile	/^RANLIB        = $/;"	m
RENDERABLEOBJ_H	rendering/RenderableObject.hpp	2;"	d
RENDERMANAGER_H	rendering/RenderingManager.hpp	2;"	d
RENDERWINDOW_H	rendering/RenderingWindow.hpp	2;"	d
RenderableObject	rendering/RenderableObject.cpp	/^	RenderableObject::RenderableObject()$/;"	f	class:rendering::RenderableObject
RenderableObject	rendering/RenderableObject.hpp	/^    class RenderableObject {$/;"	c	namespace:rendering
RenderingManager	rendering/RenderingManager.cpp	/^    RenderingManager::RenderingManager(BaseCamera& cam, glm::vec2 _viewportSize, glm::vec2 _shadowMapSize) {$/;"	f	class:rendering::RenderingManager
RenderingManager	rendering/RenderingManager.hpp	/^    class RenderingManager {$/;"	c	namespace:rendering
RenderingWindow	rendering/RenderingWindow.cpp	/^	RenderingWindow::RenderingWindow( std::string _name, int _width, int _height )$/;"	f	class:rendering::RenderingWindow
RenderingWindow	rendering/RenderingWindow.hpp	/^	class RenderingWindow$/;"	c	namespace:rendering
Rvec	tracking/Pattern.hpp	/^  cv::Mat Rvec;$/;"	m	struct:PatternTrackingInfo
S	glm/core/_swizzle.hpp	/^		S = 0,$/;"	e	enum:glm::comp
SED	bin/Makefile	/^SED           = sed$/;"	m
SOURCES	bin/Makefile	/^SOURCES       = ..\/tracking\/Tracker.cpp \\$/;"	m
SPRITE_H	rendering/Sprite.hpp	2;"	d
STRIP	bin/Makefile	/^STRIP         = strip$/;"	m
SYMLINK	bin/Makefile	/^SYMLINK       = ln -f -s$/;"	m
SimpleFrameListener	tst/MinimalOgre.cpp	/^    SimpleFrameListener(OIS::Keyboard* keyboard, OIS::Mouse* mouse) $/;"	f	class:SimpleFrameListener
SimpleFrameListener	tst/MinimalOgre.cpp	/^class SimpleFrameListener : public FrameListener $/;"	c	file:
SimpleKeyListener	tst/MinimalOgre.cpp	/^class SimpleKeyListener : public OIS::KeyListener $/;"	c	file:
SimpleMouseListener	tst/MinimalOgre.cpp	/^class SimpleMouseListener : public OIS::MouseListener$/;"	c	file:
Sprite	rendering/Sprite.cpp	/^    Sprite::Sprite(const char* _img_path, BaseShader& _shader) {$/;"	f	class:rendering::Sprite
Sprite	rendering/Sprite.hpp	/^    class Sprite : public RenderableObject {$/;"	c	namespace:rendering
Stub	glm/core/_swizzle.hpp	/^		struct Stub {};$/;"	s	struct:glm::detail::_swizzle_base2
T	glm/core/_swizzle.hpp	/^		T = 1,$/;"	e	enum:glm::comp
TAR	bin/Makefile	/^TAR           = tar -cf$/;"	m
TARGET	bin/Makefile	/^TARGET        = PhotometricAR$/;"	m
ToString	tracking/DebugHelpers.hpp	/^std::string ToString(const T& value)$/;"	f
Transformation	tracking/GeometryTypes.cpp	/^Transformation::Transformation()$/;"	f	class:Transformation
Transformation	tracking/GeometryTypes.cpp	/^Transformation::Transformation(const Matrix33& r, const Vector3& t)$/;"	f	class:Transformation
Transformation	tracking/GeometryTypes.hpp	/^struct Transformation$/;"	s
Tvec	tracking/Pattern.hpp	/^  cv::Mat_<float> Tvec;$/;"	m	struct:PatternTrackingInfo
VECTORIZE2_VEC	glm/core/_vectorize.hpp	29;"	d
VECTORIZE2_VEC_SCA	glm/core/_vectorize.hpp	67;"	d
VECTORIZE2_VEC_VEC	glm/core/_vectorize.hpp	114;"	d
VECTORIZE3_VEC	glm/core/_vectorize.hpp	39;"	d
VECTORIZE3_VEC_SCA	glm/core/_vectorize.hpp	80;"	d
VECTORIZE3_VEC_VEC	glm/core/_vectorize.hpp	127;"	d
VECTORIZE4_VEC	glm/core/_vectorize.hpp	50;"	d
VECTORIZE4_VEC_SCA	glm/core/_vectorize.hpp	94;"	d
VECTORIZE4_VEC_VEC	glm/core/_vectorize.hpp	141;"	d
VECTORIZE_VEC	glm/core/_vectorize.hpp	62;"	d
VECTORIZE_VEC_SCA	glm/core/_vectorize.hpp	109;"	d
VECTORIZE_VEC_VEC	glm/core/_vectorize.hpp	156;"	d
Vector3	tracking/GeometryTypes.hpp	/^struct Vector3$/;"	s
Vector4	tracking/GeometryTypes.hpp	/^struct Vector4$/;"	s
W	glm/core/_swizzle.hpp	/^		W = 3,$/;"	e	enum:glm::comp
WIN32_LEAN_AND_MEAN	tst/MinimalOgre.cpp	80;"	d	file:
WINDOW_HEIGHT	tst/irrlicht_render.cpp	/^const int WINDOW_HEIGHT = 600;$/;"	v
WINDOW_WIDTH	tst/irrlicht_render.cpp	/^const int WINDOW_WIDTH = 800;$/;"	v
WinMain	tst/MinimalOgre.cpp	/^    INT WINAPI WinMain(HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT)$/;"	f
X	glm/core/_swizzle.hpp	/^		X = 0,$/;"	e	enum:glm::comp
Y	glm/core/_swizzle.hpp	/^		Y = 1,$/;"	e	enum:glm::comp
Z	glm/core/_swizzle.hpp	/^		Z = 2,$/;"	e	enum:glm::comp
_GLM_SWIZZLE2_2_MEMBERS	glm/core/_swizzle.hpp	353;"	d
_GLM_SWIZZLE2_3_MEMBERS	glm/core/_swizzle.hpp	359;"	d
_GLM_SWIZZLE2_4_MEMBERS	glm/core/_swizzle.hpp	369;"	d
_GLM_SWIZZLE3_2_MEMBERS	glm/core/_swizzle.hpp	387;"	d
_GLM_SWIZZLE3_3_MEMBERS	glm/core/_swizzle.hpp	398;"	d
_GLM_SWIZZLE3_4_MEMBERS	glm/core/_swizzle.hpp	427;"	d
_GLM_SWIZZLE4_2_MEMBERS	glm/core/_swizzle.hpp	510;"	d
_GLM_SWIZZLE4_3_MEMBERS	glm/core/_swizzle.hpp	528;"	d
_GLM_SWIZZLE4_4_MEMBERS	glm/core/_swizzle.hpp	594;"	d
_GLM_SWIZZLE_FUNCTION_1_ARGS	glm/core/_swizzle.hpp	259;"	d
_GLM_SWIZZLE_FUNCTION_2_ARGS	glm/core/_swizzle.hpp	269;"	d
_GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR	glm/core/_swizzle.hpp	294;"	d
_GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION	glm/core/_swizzle.hpp	244;"	d
_GLM_SWIZZLE_TEMPLATE1	glm/core/_swizzle.hpp	216;"	d
_GLM_SWIZZLE_TEMPLATE2	glm/core/_swizzle.hpp	217;"	d
_GLM_SWIZZLE_TYPE1	glm/core/_swizzle.hpp	218;"	d
_GLM_SWIZZLE_TYPE2	glm/core/_swizzle.hpp	219;"	d
_GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION	glm/core/_swizzle.hpp	224;"	d
_NO	glm/core/_detail.hpp	/^			_NO = 0$/;"	e	enum:glm::detail::is_bool::is_bool_enum
_NO	glm/core/_detail.hpp	/^			_NO = 1$/;"	e	enum:glm::detail::is_bool::is_bool_enum
_NO	glm/core/_detail.hpp	/^			_NO = 1$/;"	e	enum:glm::detail::is_float::is_float_enum
_NO	glm/core/_detail.hpp	/^			_NO = 1$/;"	e	enum:glm::detail::is_int::is_int_enum
_NO	glm/core/_detail.hpp	/^			_NO = 1$/;"	e	enum:glm::detail::is_matrix::is_matrix_enum
_NO	glm/core/_detail.hpp	/^			_NO = 1$/;"	e	enum:glm::detail::is_uint::is_uint_enum
_NO	glm/core/_detail.hpp	/^			_NO = 1$/;"	e	enum:glm::detail::is_vector::is_vector_enum
_YES	glm/core/_detail.hpp	/^			_YES = 0,$/;"	e	enum:glm::detail::is_bool::is_bool_enum
_YES	glm/core/_detail.hpp	/^			_YES = 0,$/;"	e	enum:glm::detail::is_float::is_float_enum
_YES	glm/core/_detail.hpp	/^			_YES = 0,$/;"	e	enum:glm::detail::is_int::is_int_enum
_YES	glm/core/_detail.hpp	/^			_YES = 0,$/;"	e	enum:glm::detail::is_matrix::is_matrix_enum
_YES	glm/core/_detail.hpp	/^			_YES = 0,$/;"	e	enum:glm::detail::is_uint::is_uint_enum
_YES	glm/core/_detail.hpp	/^			_YES = 0,$/;"	e	enum:glm::detail::is_vector::is_vector_enum
_YES	glm/core/_detail.hpp	/^			_YES = 1,$/;"	e	enum:glm::detail::is_bool::is_bool_enum
__MinimalOgre_h_	tst/MinimalOgre.h	18;"	d
_apply_op	glm/core/_swizzle.hpp	/^		void _apply_op(const VecType& that, T op)$/;"	f	struct:glm::detail::_swizzle_base2
_buffer	glm/core/_swizzle.hpp	/^		char    _buffer[1];$/;"	m	struct:glm::detail::_swizzle_base0
_data	glm/core/type_half.hpp	/^		GLM_FUNC_DECL hdata _data() const{return data;}$/;"	f	class:glm::detail::half
_swizzle_base0	glm/core/_swizzle.hpp	/^	struct _swizzle_base0$/;"	s	namespace:glm::detail
_swizzle_base1	glm/core/_swizzle.hpp	/^	struct _swizzle_base1 : public _swizzle_base0<T,N>$/;"	s	namespace:glm::detail
_swizzle_base1	glm/core/_swizzle.hpp	/^	struct _swizzle_base1<T,V,E0,E1,-1,-2,2> : public _swizzle_base0<T,2>$/;"	s	namespace:glm::detail
_swizzle_base1	glm/core/_swizzle.hpp	/^	struct _swizzle_base1<T,V,E0,E1,E2,-1,3> : public _swizzle_base0<T,3>$/;"	s	namespace:glm::detail
_swizzle_base1	glm/core/_swizzle.hpp	/^	struct _swizzle_base1<T,V,E0,E1,E2,E3,4> : public _swizzle_base0<T,4>$/;"	s	namespace:glm::detail
_swizzle_base2	glm/core/_swizzle.hpp	/^	struct _swizzle_base2 : public _swizzle_base1<ValueType,VecType,E0,E1,E2,E3,N>$/;"	s	namespace:glm::detail
_swizzle_base2	glm/core/_swizzle.hpp	/^	struct _swizzle_base2<ValueType,VecType,N,E0,E1,E2,E3,1> : public _swizzle_base1<ValueType,VecType,E0,E1,E2,E3,N>$/;"	s	namespace:glm::detail
a	glm/core/type_vec4.hpp	/^			struct{value_type r, g, b, a;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon11
a	glm/core/type_vec4.hpp	/^		union {value_type w, a, q;};$/;"	m	union:glm::detail::tvec4::__anon17
add	rendering/RenderingManager.cpp	/^    void RenderingManager::add(RenderableObject& obj) {$/;"	f	class:rendering::RenderingManager
ambientLight	rendering/Mesh.hpp	/^        vec3 ambientLight;$/;"	m	class:rendering::Mesh
ambientLightLoc	rendering/Mesh.hpp	/^        GLuint ambientLightLoc;$/;"	m	class:rendering::Mesh
appendVerticesList	rendering/RenderingManager.cpp	/^    void RenderingManager::appendVerticesList( vector<vec3>& _a, vector<vec3>& _b ){$/;"	f	class:rendering::RenderingManager
apply	glm/core/_detail.hpp	/^		static GLM_FUNC_QUALIFIER T apply(F functor, const T& val)$/;"	f	struct:glm::detail::If
apply	glm/core/_detail.hpp	/^		static GLM_FUNC_QUALIFIER T apply(F, const T& val)$/;"	f	struct:glm::detail::If
assignBufferTexToData	rendering/Sprite.cpp	/^    void Sprite::assignBufferTexToData(GLuint textureLoc) {$/;"	f	class:rendering::Sprite
atan2	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER T atan2(T x, T y){return atan(x, y);}																\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
atan2	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec2<T> atan2(const detail::tvec2<T>& x, const detail::tvec2<T>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
atan2	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec3<T> atan2(const detail::tvec3<T>& x, const detail::tvec3<T>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
atan2	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec4<T> atan2(const detail::tvec4<T>& x, const detail::tvec4<T>& y){return atan(x, y);}	\/\/!< \\brief Arc tangent. Returns an angle whose tangent is y\/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
augmentedViewMatrix	rendering/Mesh.hpp	/^        mat4 augmentedViewMatrix;$/;"	m	class:rendering::Mesh
b	glm/core/type_vec3.hpp	/^			struct{value_type r, g, b;};$/;"	m	struct:glm::detail::tvec3::__anon3::__anon4
b	glm/core/type_vec3.hpp	/^		union {value_type z, b, p;};$/;"	m	union:glm::detail::tvec3::__anon9
b	glm/core/type_vec4.hpp	/^			struct{value_type r, g, b, a;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon11
b	glm/core/type_vec4.hpp	/^		union {value_type z, b, p;};$/;"	m	union:glm::detail::tvec4::__anon16
base_type	glm/core/_swizzle.hpp	/^		typedef _swizzle_base2<ValueType,VecType,N,E0,E1,E2,E3,(E0==E1||E0==E2||E0==E3||E1==E2||E1==E3||E2==E3)> base_type;$/;"	t	struct:glm::detail::swizzle
bool1	glm/gtx/compatibility.hpp	/^	typedef bool						bool1;			\/\/!< \\brief boolean type with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool1x1	glm/gtx/compatibility.hpp	/^	typedef bool						bool1x1;		\/\/!< \\brief boolean matrix with 1 x 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2	glm/gtx/compatibility.hpp	/^	typedef detail::tvec2<bool>			bool2;			\/\/!< \\brief boolean type with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x2<bool>		bool2x2;		\/\/!< \\brief boolean matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x3<bool>		bool2x3;		\/\/!< \\brief boolean matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool2x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x4<bool>		bool2x4;		\/\/!< \\brief boolean matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3	glm/gtx/compatibility.hpp	/^	typedef detail::tvec3<bool>			bool3;			\/\/!< \\brief boolean type with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x2<bool>		bool3x2;		\/\/!< \\brief boolean matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x3<bool>		bool3x3;		\/\/!< \\brief boolean matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool3x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x4<bool>		bool3x4;		\/\/!< \\brief boolean matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4	glm/gtx/compatibility.hpp	/^	typedef detail::tvec4<bool>			bool4;			\/\/!< \\brief boolean type with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x2<bool>		bool4x2;		\/\/!< \\brief boolean matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x3<bool>		bool4x3;		\/\/!< \\brief boolean matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool4x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x4<bool>		bool4x4;		\/\/!< \\brief boolean matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
bool_type	glm/core/type_gentype.hpp	/^		typedef TYPE<bool> bool_type;$/;"	t	struct:glm::detail::genType
bool_type	glm/core/type_vec1.hpp	/^		typedef tvec1<bool> bool_type;$/;"	t	struct:glm::detail::tvec1
bool_type	glm/core/type_vec2.hpp	/^		typedef tvec2<bool> bool_type;$/;"	t	struct:glm::detail::tvec2
bool_type	glm/core/type_vec3.hpp	/^		typedef tvec3<bool> bool_type;$/;"	t	struct:glm::detail::tvec3
bool_type	glm/core/type_vec4.hpp	/^		typedef tvec4<bool> bool_type;$/;"	t	struct:glm::detail::tvec4
bool_type	glm/gtc/half_float.hpp	/^		typedef tvec2<bool> bool_type;$/;"	t	struct:glm::detail::tvec2
bool_type	glm/gtc/half_float.hpp	/^		typedef tvec3<bool> bool_type;$/;"	t	struct:glm::detail::tvec3
bool_type	glm/gtc/half_float.hpp	/^		typedef tvec4<bool> bool_type;$/;"	t	struct:glm::detail::tvec4
buildFrontPatternFromImage	tracking/PatternDetector.cpp	/^void PatternDetector::buildFrontPatternFromImage(const cv::Mat& image, Pattern& pattern) const {$/;"	f	class:PatternDetector
buildLeftPatternFromImage	tracking/PatternDetector.cpp	/^void PatternDetector::buildLeftPatternFromImage(const cv::Mat& image, Pattern& pattern) const {$/;"	f	class:PatternDetector
buildMainPatternFromImage	tracking/PatternDetector.cpp	/^void PatternDetector::buildMainPatternFromImage(const cv::Mat& image, Pattern& pattern) const$/;"	f	class:PatternDetector
buildProjectionMatrix	tracking/ARDrawingContext.cpp	/^void ARDrawingContext::buildProjectionMatrix(const CameraCalibration& calibration, int screen_width, int screen_height, Matrix44& projectionMatrix)$/;"	f	class:ARDrawingContext
buildProjectionMatrix	tst/main.cpp	/^    void buildProjectionMatrix() {$/;"	f	class:IlluminationWindow
buildRightPatternFromImage	tracking/PatternDetector.cpp	/^void PatternDetector::buildRightPatternFromImage(const cv::Mat& image, Pattern& pattern) const {$/;"	f	class:PatternDetector
bvec1	glm/gtx/vec1.hpp	/^	typedef detail::tvec1<bool>	bvec1;$/;"	t	namespace:glm
bvec2	glm/core/type.hpp	/^	typedef detail::tvec2<bool>		bvec2;$/;"	t	namespace:glm
bvec3	glm/core/type.hpp	/^	typedef detail::tvec3<bool>		bvec3;$/;"	t	namespace:glm
bvec4	glm/core/type.hpp	/^	typedef detail::tvec4<bool>		bvec4;$/;"	t	namespace:glm
byte	glm/gtx/raw_data.hpp	/^	typedef uint8		byte;$/;"	t	namespace:glm
calcAmbientOcclusion	rendering/RenderingManager.cpp	/^    void RenderingManager::calcAmbientOcclusion() {$/;"	f	class:rendering::RenderingManager
calcVertexVisibility	rendering/Mesh.cpp	/^    void Mesh::calcVertexVisibility(vector<vec3>& _sceneVertices) {$/;"	f	class:rendering::Mesh
calibration	tst/main.cpp	/^    CameraCalibration calibration;$/;"	m	class:IlluminationWindow	file:
calibration	tst/tst-render.cpp	/^		CameraCalibration calibration;$/;"	m	class:IlluminationWindow	file:
camera	rendering/RenderingManager.hpp	/^        BaseCamera* camera;$/;"	m	class:rendering::RenderingManager
camera	tst/main.cpp	/^    BaseCamera camera;$/;"	m	class:IlluminationWindow	file:
camera	tst/tst-render.cpp	/^		BaseCamera camera;$/;"	m	class:IlluminationWindow	file:
capture	tst/main.cpp	/^    cv::VideoCapture * capture;$/;"	m	class:IlluminationWindow	file:
capture	tst/tst-render.cpp	/^		cv::VideoCapture * capture;$/;"	m	class:IlluminationWindow	file:
castShadows	rendering/RenderableObject.hpp	/^        bool castShadows;$/;"	m	class:rendering::RenderableObject
cl_char	glm/gtx/ocl_type.hpp	/^	typedef detail::int8						cl_char;		\/\/!< \\brief 8bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_char1	glm/gtx/ocl_type.hpp	/^	typedef detail::int8						cl_char1;		\/\/!< \\brief 8bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_char2	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec2<detail::int8>			cl_char2;		\/\/!< \\brief 8bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_char3	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec3<detail::int8>			cl_char3;		\/\/!< \\brief 8bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_char4	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec4<detail::int8>			cl_char4;		\/\/!< \\brief 8bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_float	glm/gtx/ocl_type.hpp	/^	typedef detail::float32						cl_float;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_float1	glm/gtx/ocl_type.hpp	/^	typedef detail::float32						cl_float1;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_float2	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec2<detail::float32>		cl_float2;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_float3	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec3<detail::float32>		cl_float3;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_float4	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec4<detail::float32>		cl_float4;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_half	glm/gtx/ocl_type.hpp	/^	typedef detail::float16						cl_half;	\/\/!< \\brief Half-precision floating-point scalar. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_int	glm/gtx/ocl_type.hpp	/^	typedef detail::int32						cl_int;			\/\/!< \\brief 32bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_int1	glm/gtx/ocl_type.hpp	/^	typedef detail::int32						cl_int1;			\/\/!< \\brief 32bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_int2	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec2<detail::int32>		cl_int2;			\/\/!< \\brief 32bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_int3	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec3<detail::int32>		cl_int3;			\/\/!< \\brief 32bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_int4	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec4<detail::int32>		cl_int4;			\/\/!< \\brief 32bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_long	glm/gtx/ocl_type.hpp	/^	typedef detail::int64						cl_long;		\/\/!< \\brief 64bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_long1	glm/gtx/ocl_type.hpp	/^	typedef detail::int64						cl_long1;		\/\/!< \\brief 64bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_long2	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec2<detail::int64>		cl_long2;		\/\/!< \\brief 64bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_long3	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec3<detail::int64>		cl_long3;		\/\/!< \\brief 64bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_long4	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec4<detail::int64>		cl_long4;		\/\/!< \\brief 64bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_short	glm/gtx/ocl_type.hpp	/^	typedef detail::int16						cl_short;		\/\/!< \\brief 16bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_short1	glm/gtx/ocl_type.hpp	/^	typedef detail::int16						cl_short1;		\/\/!< \\brief 16bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_short2	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec2<detail::int16>		cl_short2;		\/\/!< \\brief 16bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_short3	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec3<detail::int16>		cl_short3;		\/\/!< \\brief 16bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_short4	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec4<detail::int16>		cl_short4;		\/\/!< \\brief 16bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_uchar	glm/gtx/ocl_type.hpp	/^	typedef detail::uint8						cl_uchar;		\/\/!< \\brief 8bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_uchar1	glm/gtx/ocl_type.hpp	/^	typedef detail::uint8						cl_uchar1;		\/\/!< \\brief 8bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_uchar2	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec2<detail::uint8>		cl_uchar2;		\/\/!< \\brief 8bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_uchar3	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec3<detail::uint8>		cl_uchar3;		\/\/!< \\brief 8bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_uchar4	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec4<detail::uint8>		cl_uchar4;		\/\/!< \\brief 8bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_uint	glm/gtx/ocl_type.hpp	/^	typedef detail::uint32						cl_uint;		\/\/!< \\brief 32bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_uint1	glm/gtx/ocl_type.hpp	/^	typedef detail::uint32						cl_uint1;		\/\/!< \\brief 32bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_uint2	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec2<detail::uint32>		cl_uint2;		\/\/!< \\brief 32bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_uint3	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec3<detail::uint32>		cl_uint3;		\/\/!< \\brief 32bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_uint4	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec4<detail::uint32>		cl_uint4;		\/\/!< \\brief 32bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_ulong	glm/gtx/ocl_type.hpp	/^	typedef detail::uint64						cl_ulong;		\/\/!< \\brief 64bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_ulong1	glm/gtx/ocl_type.hpp	/^	typedef detail::uint64						cl_ulong1;		\/\/!< \\brief 64bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_ulong2	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec2<detail::uint64>		cl_ulong2;		\/\/!< \\brief 64bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_ulong3	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec3<detail::uint64>		cl_ulong3;		\/\/!< \\brief 64bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_ulong4	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec4<detail::uint64>		cl_ulong4;		\/\/!< \\brief 64bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_ushort	glm/gtx/ocl_type.hpp	/^	typedef detail::uint16						cl_ushort;		\/\/!< \\brief 16bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_ushort1	glm/gtx/ocl_type.hpp	/^	typedef detail::uint16						cl_ushort1;		\/\/!< \\brief 16bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_ushort2	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec2<detail::uint16>		cl_ushort2;		\/\/!< \\brief 16bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_ushort3	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec3<detail::uint16>		cl_ushort3;		\/\/!< \\brief 16bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
cl_ushort4	glm/gtx/ocl_type.hpp	/^	typedef detail::tvec4<detail::uint16>		cl_ushort4;		\/\/!< \\brief 16bit signed integer. (from GLM_GTX_ocl_type extension)$/;"	t	namespace:glm::gtx
col_type	glm/core/type_mat2x2.hpp	/^		typedef tvec2<T> col_type;$/;"	t	struct:glm::detail::tmat2x2
col_type	glm/core/type_mat2x3.hpp	/^		typedef tvec3<T> col_type;$/;"	t	struct:glm::detail::tmat2x3
col_type	glm/core/type_mat2x4.hpp	/^		typedef tvec4<T> col_type;$/;"	t	struct:glm::detail::tmat2x4
col_type	glm/core/type_mat3x2.hpp	/^		typedef tvec2<T> col_type;$/;"	t	struct:glm::detail::tmat3x2
col_type	glm/core/type_mat3x3.hpp	/^		typedef tvec3<T> col_type;$/;"	t	struct:glm::detail::tmat3x3
col_type	glm/core/type_mat3x4.hpp	/^		typedef tvec4<T> col_type;$/;"	t	struct:glm::detail::tmat3x4
col_type	glm/core/type_mat4x2.hpp	/^		typedef tvec2<T> col_type;$/;"	t	struct:glm::detail::tmat4x2
col_type	glm/core/type_mat4x3.hpp	/^		typedef tvec3<T> col_type;$/;"	t	struct:glm::detail::tmat4x3
col_type	glm/core/type_mat4x4.hpp	/^		typedef tvec4<T> col_type;$/;"	t	struct:glm::detail::tmat4x4
color	rendering/RenderingManager.hpp	/^        glm::vec3 color;$/;"	m	struct:rendering::DirectionalLightInfo
comp	glm/core/_swizzle.hpp	/^	enum comp$/;"	g	namespace:glm
computeAmbientLight	tracking/ARPipeline.cpp	/^cv::Scalar ARPipeline::computeAmbientLight(cv::Mat& org, cv::Mat& rec)$/;"	f	class:ARPipeline
computeLightColor	tracking/ARPipeline.cpp	/^cv::Scalar ARPipeline::computeLightColor(cv::Mat& org, cv::Mat& rec)$/;"	f	class:ARPipeline
computeLightDirection	tracking/ARPipeline.cpp	/^cv::Point3f ARPipeline::computeLightDirection()$/;"	f	class:ARPipeline
computePose	tracking/Pattern.cpp	/^void PatternTrackingInfo::computePose(const Pattern& pattern, const CameraCalibration& calibration)$/;"	f	class:PatternTrackingInfo
computeViewMat	tst/tst-render.cpp	/^		mat4 computeViewMat()$/;"	f	class:IlluminationWindow
const_pointer	glm/core/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const * const_pointer;$/;"	t	struct:glm::detail::genType
const_pointer_const	glm/core/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const * const const_pointer_const;$/;"	t	struct:glm::detail::genType
const_reference	glm/core/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const & const_reference;$/;"	t	struct:glm::detail::genType
createCompleteShader	rendering/BaseShader.cpp	/^	void BaseShader::createCompleteShader( const char* _vert_filename, const char* _frag_filename)$/;"	f	class:rendering::BaseShader
createGeneralShader	rendering/BaseShader.cpp	/^	GLuint BaseShader::createGeneralShader( const char* _filename, GLenum _type)$/;"	f	class:rendering::BaseShader
ctor	glm/core/type_gentype.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::genType
ctor	glm/core/type_mat2x2.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tmat2x2
ctor	glm/core/type_mat2x3.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tmat2x3
ctor	glm/core/type_mat2x4.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tmat2x4
ctor	glm/core/type_mat3x2.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tmat3x2
ctor	glm/core/type_mat3x3.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tmat3x3
ctor	glm/core/type_mat3x4.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tmat3x4
ctor	glm/core/type_mat4x2.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tmat4x2
ctor	glm/core/type_mat4x3.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tmat4x3
ctor	glm/core/type_mat4x4.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tmat4x4
ctor	glm/core/type_vec1.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tvec1
ctor	glm/core/type_vec2.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tvec2
ctor	glm/core/type_vec3.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tvec3
ctor	glm/core/type_vec4.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tvec4
ctor	glm/gtc/half_float.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tvec2
ctor	glm/gtc/half_float.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tvec3
ctor	glm/gtc/half_float.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tvec4
ctor	glm/gtc/quaternion.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::tquat
currentAmbientLight	tracking/ARPipeline.hpp	/^    cv::Scalar currentAmbientLight;$/;"	m	class:ARPipeline
currentDiffuseColor	tracking/ARPipeline.hpp	/^    cv::Scalar currentDiffuseColor;$/;"	m	class:ARPipeline
currentFrame	tst/main.cpp	/^    cv::Mat currentFrame;$/;"	m	class:IlluminationWindow	file:
currentFrame	tst/tst-render.cpp	/^		cv::Mat currentFrame;$/;"	m	class:IlluminationWindow	file:
cv	tracking/DebugHelpers.hpp	/^namespace cv$/;"	n
cx	tracking/CameraCalibration.cpp	/^float CameraCalibration::cx() const$/;"	f	class:CameraCalibration
cx	tracking/CameraCalibration.cpp	/^float& CameraCalibration::cx()$/;"	f	class:CameraCalibration
cy	tracking/CameraCalibration.cpp	/^float CameraCalibration::cy() const$/;"	f	class:CameraCalibration
cy	tracking/CameraCalibration.cpp	/^float& CameraCalibration::cy()$/;"	f	class:CameraCalibration
data	glm/core/type_half.hpp	/^		hdata data;$/;"	m	class:glm::detail::half
data	tracking/GeometryTypes.hpp	/^    float data[16];$/;"	m	union:Matrix44::__anon1
data	tracking/GeometryTypes.hpp	/^    float data[9];$/;"	m	union:Matrix33::__anon2
data	tracking/GeometryTypes.hpp	/^  float data[3];$/;"	m	struct:Vector3
data	tracking/GeometryTypes.hpp	/^  float data[4];$/;"	m	struct:Vector4
depthBiasMatLoc	rendering/Mesh.hpp	/^        GLuint depthBiasMatLoc;$/;"	m	class:rendering::Mesh
depthMVP	rendering/Mesh.hpp	/^        mat4 depthMVP;$/;"	m	class:rendering::Mesh
depthMatLoc	rendering/Mesh.hpp	/^        GLuint depthMatLoc;$/;"	m	class:rendering::Mesh
depthTexture	rendering/RenderingManager.hpp	/^        GLuint depthTexture;$/;"	m	class:rendering::RenderingManager
descriptors	tracking/Pattern.hpp	/^  cv::Mat                   descriptors;$/;"	m	struct:Pattern
detail	glm/core/_detail.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/_swizzle.hpp	/^	namespace detail$/;"	n	namespace:glm
detail	glm/core/_swizzle.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/intrinsic_common.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/intrinsic_exponential.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/intrinsic_geometric.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/intrinsic_matrix.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/intrinsic_trigonometric.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/intrinsic_vector_relational.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_gentype.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_half.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_int.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_mat.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_mat2x2.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_mat2x3.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_mat2x4.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_mat3x2.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_mat3x3.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_mat3x4.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_mat4x2.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_mat4x3.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_mat4x4.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_size.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_vec.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_vec1.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_vec2.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_vec3.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/core/type_vec4.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/gtc/half_float.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/gtc/quaternion.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/gtx/simd_mat4.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/gtx/simd_vec4.hpp	/^namespace detail$/;"	n	namespace:glm
direction	rendering/RenderingManager.hpp	/^        glm::vec3 direction;$/;"	m	struct:rendering::DirectionalLightInfo
dmat2	glm/core/type.hpp	/^	typedef detail::tmat2x2<double>	dmat2;$/;"	t	namespace:glm
dmat2x2	glm/core/type.hpp	/^	typedef detail::tmat2x2<double>	dmat2x2;$/;"	t	namespace:glm
dmat2x3	glm/core/type.hpp	/^	typedef detail::tmat2x3<double>	dmat2x3;$/;"	t	namespace:glm
dmat2x4	glm/core/type.hpp	/^	typedef detail::tmat2x4<double>	dmat2x4;$/;"	t	namespace:glm
dmat3	glm/core/type.hpp	/^	typedef detail::tmat3x3<double>	dmat3;$/;"	t	namespace:glm
dmat3x2	glm/core/type.hpp	/^	typedef detail::tmat3x2<double>	dmat3x2;$/;"	t	namespace:glm
dmat3x3	glm/core/type.hpp	/^	typedef detail::tmat3x3<double>	dmat3x3;$/;"	t	namespace:glm
dmat3x4	glm/core/type.hpp	/^	typedef detail::tmat3x4<double>	dmat3x4;$/;"	t	namespace:glm
dmat4	glm/core/type.hpp	/^	typedef detail::tmat4x4<double>	dmat4;$/;"	t	namespace:glm
dmat4x2	glm/core/type.hpp	/^	typedef detail::tmat4x2<double>	dmat4x2;$/;"	t	namespace:glm
dmat4x3	glm/core/type.hpp	/^	typedef detail::tmat4x3<double>	dmat4x3;$/;"	t	namespace:glm
dmat4x4	glm/core/type.hpp	/^	typedef detail::tmat4x4<double>	dmat4x4;$/;"	t	namespace:glm
dont_care	glm/core/hint.hpp	/^	class dont_care {};$/;"	c	namespace:glm
double1	glm/gtx/compatibility.hpp	/^	typedef double						double1;		\/\/!< \\brief double-precision floating-point vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double1x1	glm/gtx/compatibility.hpp	/^	typedef double						double1x1;		\/\/!< \\brief double-precision floating-point matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2	glm/gtx/compatibility.hpp	/^	typedef detail::tvec2<double>		double2;		\/\/!< \\brief double-precision floating-point vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x2<double>		double2x2;		\/\/!< \\brief double-precision floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x3<double>		double2x3;		\/\/!< \\brief double-precision floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double2x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x4<double>		double2x4;		\/\/!< \\brief double-precision floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3	glm/gtx/compatibility.hpp	/^	typedef detail::tvec3<double>		double3;		\/\/!< \\brief double-precision floating-point vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x2<double>		double3x2;		\/\/!< \\brief double-precision floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x3<double>		double3x3;		\/\/!< \\brief double-precision floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double3x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x4<double>		double3x4;		\/\/!< \\brief double-precision floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4	glm/gtx/compatibility.hpp	/^	typedef detail::tvec4<double>		double4;		\/\/!< \\brief double-precision floating-point vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x2<double>		double4x2;		\/\/!< \\brief double-precision floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x3<double>		double4x3;		\/\/!< \\brief double-precision floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
double4x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x4<double>		double4x4;		\/\/!< \\brief double-precision floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
dquat	glm/gtc/quaternion.hpp	/^	typedef detail::tquat<double>	dquat;$/;"	t	namespace:glm
draw	rendering/Mesh.cpp	/^    void Mesh::draw(BaseCamera& _camera) {$/;"	f	class:rendering::Mesh
draw	rendering/RenderableObject.cpp	/^	void RenderableObject::draw( BaseCamera& cam )$/;"	f	class:rendering::RenderableObject
draw	rendering/Sprite.cpp	/^    void Sprite::draw(BaseCamera& _camera) {$/;"	f	class:rendering::Sprite
draw	tracking/ARDrawingContext.cpp	/^void ARDrawingContext::draw()$/;"	f	class:ARDrawingContext
draw2dContour	tracking/Pattern.cpp	/^void PatternTrackingInfo::draw2dContour(cv::Mat& image, cv::Scalar color) const$/;"	f	class:PatternTrackingInfo
drawAugmentedScene	tracking/ARDrawingContext.cpp	/^void ARDrawingContext::drawAugmentedScene()$/;"	f	class:ARDrawingContext
drawCameraFrame	tracking/ARDrawingContext.cpp	/^void ARDrawingContext::drawCameraFrame()$/;"	f	class:ARDrawingContext
drawCoordinateAxis	tracking/ARDrawingContext.cpp	/^void ARDrawingContext::drawCoordinateAxis()$/;"	f	class:ARDrawingContext
drawCubeModel	tracking/ARDrawingContext.cpp	/^void ARDrawingContext::drawCubeModel()$/;"	f	class:ARDrawingContext
drawShadowMap	rendering/Mesh.cpp	/^    void Mesh::drawShadowMap(glm::vec3 _lightDirection) {$/;"	f	class:rendering::Mesh
drawShadowMap	rendering/RenderableObject.cpp	/^	void RenderableObject::drawShadowMap(glm::vec3 _lightDirection)$/;"	f	class:rendering::RenderableObject
drawShadowMap	rendering/Sprite.cpp	/^    void Sprite::drawShadowMap(glm::vec3) {$/;"	f	class:rendering::Sprite
dvec2	glm/core/type.hpp	/^	typedef detail::tvec2<double>	dvec2;$/;"	t	namespace:glm
dvec3	glm/core/type.hpp	/^	typedef detail::tvec3<double>	dvec3;$/;"	t	namespace:glm
dvec4	glm/core/type.hpp	/^	typedef detail::tvec4<double>	dvec4;$/;"	t	namespace:glm
dword	glm/gtx/raw_data.hpp	/^	typedef uint32		dword;$/;"	t	namespace:glm
elem	glm/core/_swizzle.hpp	/^		const value_type&   elem   (size_t i) const { return (reinterpret_cast<const value_type*>(_buffer))[i]; }$/;"	f	struct:glm::detail::_swizzle_base0
elem	glm/core/_swizzle.hpp	/^		value_type&         elem   (size_t i)       { return (reinterpret_cast<value_type*>(_buffer))[i]; }$/;"	f	struct:glm::detail::_swizzle_base0
enableHomographyRefinement	tracking/PatternDetector.hpp	/^    bool enableHomographyRefinement;$/;"	m	class:PatternDetector
enableRatioTest	tracking/PatternDetector.hpp	/^    bool enableRatioTest;$/;"	m	class:PatternDetector
extractFeatures	tracking/PatternDetector.cpp	/^bool PatternDetector::extractFeatures(const cv::Mat& image, std::vector<cv::KeyPoint>& keypoints, cv::Mat& descriptors) const$/;"	f	class:PatternDetector
f	glm/core/_detail.hpp	/^		double f;$/;"	m	union:glm::detail::uif64
f	glm/core/_detail.hpp	/^		float f;$/;"	m	union:glm::detail::uif32
f16	glm/gtc/type_precision.hpp	/^	typedef float16 f16;$/;"	t	namespace:glm
f16mat1	glm/gtx/number_precision.hpp	/^	typedef f16			f16mat1;    \/\/!< \\brief Half-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f16mat1x1	glm/gtx/number_precision.hpp	/^	typedef f16			f16mat1x1;	\/\/!< \\brief Half-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f16mat2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x2<f16> f16mat2;$/;"	t	namespace:glm
f16mat2x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x2<f16> f16mat2x2;$/;"	t	namespace:glm
f16mat2x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x3<f16> f16mat2x3;$/;"	t	namespace:glm
f16mat2x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x4<f16> f16mat2x4;$/;"	t	namespace:glm
f16mat3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x3<f16> f16mat3;$/;"	t	namespace:glm
f16mat3x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x2<f16> f16mat3x2;$/;"	t	namespace:glm
f16mat3x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x3<f16> f16mat3x3;$/;"	t	namespace:glm
f16mat3x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x4<f16> f16mat3x4;$/;"	t	namespace:glm
f16mat4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x4<f16> f16mat4;$/;"	t	namespace:glm
f16mat4x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x2<f16> f16mat4x2;$/;"	t	namespace:glm
f16mat4x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x3<f16> f16mat4x3;$/;"	t	namespace:glm
f16mat4x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x4<f16> f16mat4x4;$/;"	t	namespace:glm
f16quat	glm/gtc/type_precision.hpp	/^	typedef detail::tquat<f16> f16quat;$/;"	t	namespace:glm
f16vec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<f16> f16vec1;$/;"	t	namespace:glm
f16vec1	glm/gtx/number_precision.hpp	/^	typedef f16			f16vec1;    \/\/!< \\brief Half-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f16vec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<f16> f16vec2;$/;"	t	namespace:glm
f16vec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<f16> f16vec3;$/;"	t	namespace:glm
f16vec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<f16> f16vec4;$/;"	t	namespace:glm
f32	glm/gtc/type_precision.hpp	/^	typedef float32 f32;$/;"	t	namespace:glm
f32mat1	glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f32mat1x1	glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1x1;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f32mat2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x2<f32> f32mat2;$/;"	t	namespace:glm
f32mat2x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x2<f32> f32mat2x2;$/;"	t	namespace:glm
f32mat2x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x3<f32> f32mat2x3;$/;"	t	namespace:glm
f32mat2x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x4<f32> f32mat2x4;$/;"	t	namespace:glm
f32mat3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x3<f32> f32mat3;$/;"	t	namespace:glm
f32mat3x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x2<f32> f32mat3x2;$/;"	t	namespace:glm
f32mat3x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x3<f32> f32mat3x3;$/;"	t	namespace:glm
f32mat3x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x4<f32> f32mat3x4;$/;"	t	namespace:glm
f32mat4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x4<f32> f32mat4;$/;"	t	namespace:glm
f32mat4x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x2<f32> f32mat4x2;$/;"	t	namespace:glm
f32mat4x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x3<f32> f32mat4x3;$/;"	t	namespace:glm
f32mat4x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x4<f32> f32mat4x4;$/;"	t	namespace:glm
f32quat	glm/gtc/type_precision.hpp	/^	typedef detail::tquat<f32> f32quat;$/;"	t	namespace:glm
f32vec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<f32> f32vec1;$/;"	t	namespace:glm
f32vec1	glm/gtx/number_precision.hpp	/^	typedef f32			f32vec1;    \/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f32vec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<f32> f32vec2;$/;"	t	namespace:glm
f32vec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<f32> f32vec3;$/;"	t	namespace:glm
f32vec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<f32> f32vec4;$/;"	t	namespace:glm
f64	glm/gtc/type_precision.hpp	/^	typedef float64 f64;$/;"	t	namespace:glm
f64mat1	glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1;	\/\/!< \\brief Double-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f64mat1x1	glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1x1;	\/\/!< \\brief Double-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f64mat2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x2<f64> f64mat2;$/;"	t	namespace:glm
f64mat2x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x2<f64> f64mat2x2;$/;"	t	namespace:glm
f64mat2x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x3<f64> f64mat2x3;$/;"	t	namespace:glm
f64mat2x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x4<f64> f64mat2x4;$/;"	t	namespace:glm
f64mat3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x3<f64> f64mat3;$/;"	t	namespace:glm
f64mat3x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x2<f64> f64mat3x2;$/;"	t	namespace:glm
f64mat3x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x3<f64> f64mat3x3;$/;"	t	namespace:glm
f64mat3x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x4<f64> f64mat3x4;$/;"	t	namespace:glm
f64mat4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x4<f64> f64mat4;$/;"	t	namespace:glm
f64mat4x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x2<f64> f64mat4x2;$/;"	t	namespace:glm
f64mat4x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x3<f64> f64mat4x3;$/;"	t	namespace:glm
f64mat4x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x4<f64> f64mat4x4;$/;"	t	namespace:glm
f64quat	glm/gtc/type_precision.hpp	/^	typedef detail::tquat<f64> f64quat;$/;"	t	namespace:glm
f64vec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<f64> f64vec1;$/;"	t	namespace:glm
f64vec1	glm/gtx/number_precision.hpp	/^	typedef f64			f64vec1;    \/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
f64vec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<f64> f64vec2;$/;"	t	namespace:glm
f64vec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<f64> f64vec3;$/;"	t	namespace:glm
f64vec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<f64> f64vec4;$/;"	t	namespace:glm
fast	glm/core/type_gentype.hpp	/^		fast,$/;"	e	enum:glm::profile
fastest	glm/core/hint.hpp	/^	class fastest {};$/;"	c	namespace:glm
findPattern	tracking/PatternDetector.cpp	/^bool PatternDetector::findPattern(const cv::Mat& image, PatternTrackingInfo& info)$/;"	f	class:PatternDetector
float1	glm/gtx/compatibility.hpp	/^	typedef float						float1;			\/\/!< \\brief single-precision floating-point vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float16	glm/core/_detail.hpp	/^	typedef detail::half						float16;$/;"	t	namespace:glm::detail
float16	glm/gtc/type_precision.hpp	/^	typedef detail::float16 float16;$/;"	t	namespace:glm
float16_t	glm/gtc/type_precision.hpp	/^	typedef detail::float16 float16_t;$/;"	t	namespace:glm
float1x1	glm/gtx/compatibility.hpp	/^	typedef float						float1x1;		\/\/!< \\brief single-precision floating-point matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2	glm/gtx/compatibility.hpp	/^	typedef detail::tvec2<float>		float2;			\/\/!< \\brief single-precision floating-point vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x2<float>		float2x2;		\/\/!< \\brief single-precision floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x3<float>		float2x3;		\/\/!< \\brief single-precision floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float2x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x4<float>		float2x4;		\/\/!< \\brief single-precision floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float3	glm/gtx/compatibility.hpp	/^	typedef detail::tvec3<float>		float3;			\/\/!< \\brief single-precision floating-point vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float32	glm/core/_detail.hpp	/^	typedef float								float32;$/;"	t	namespace:glm::detail
float32	glm/gtc/type_precision.hpp	/^	typedef detail::float32 float32;$/;"	t	namespace:glm
float32_t	glm/gtc/type_precision.hpp	/^	typedef detail::float32 float32_t;$/;"	t	namespace:glm
float3x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x2<float>		float3x2;		\/\/!< \\brief single-precision floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float3x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x3<float>		float3x3;		\/\/!< \\brief single-precision floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float3x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x4<float>		float3x4;		\/\/!< \\brief single-precision floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4	glm/gtx/compatibility.hpp	/^	typedef detail::tvec4<float>		float4;			\/\/!< \\brief single-precision floating-point vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x2<float>		float4x2;		\/\/!< \\brief single-precision floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x3<float>		float4x3;		\/\/!< \\brief single-precision floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float4x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x4<float>		float4x4;		\/\/!< \\brief single-precision floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
float64	glm/core/_detail.hpp	/^	typedef double								float64;$/;"	t	namespace:glm::detail
float64	glm/gtc/type_precision.hpp	/^	typedef detail::float64 float64;$/;"	t	namespace:glm
float64_t	glm/gtc/type_precision.hpp	/^	typedef detail::float64 float64_t;$/;"	t	namespace:glm
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait$/;"	s	namespace:glm::detail
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait<float16>$/;"	s	namespace:glm::detail
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait<float32>$/;"	s	namespace:glm::detail
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait<float64>$/;"	s	namespace:glm::detail
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait<int16>$/;"	s	namespace:glm::detail
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait<int32>$/;"	s	namespace:glm::detail
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait<int64>$/;"	s	namespace:glm::detail
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait<int8>$/;"	s	namespace:glm::detail
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait<uint16>$/;"	s	namespace:glm::detail
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait<uint32>$/;"	s	namespace:glm::detail
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait<uint64>$/;"	s	namespace:glm::detail
float_or_int_trait	glm/core/_detail.hpp	/^	struct float_or_int_trait<uint8>$/;"	s	namespace:glm::detail
float_or_int_value	glm/core/_detail.hpp	/^	struct float_or_int_value$/;"	s	namespace:glm::detail
float_t	glm/core/type_float.hpp	/^	typedef highp_float                  float_t;$/;"	t	namespace:glm
float_t	glm/core/type_float.hpp	/^	typedef lowp_float					float_t;$/;"	t	namespace:glm
float_t	glm/core/type_float.hpp	/^	typedef mediump_float				float_t;$/;"	t	namespace:glm
fmat2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x2<f32> fmat2;$/;"	t	namespace:glm
fmat2x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x2<f32> fmat2x2;$/;"	t	namespace:glm
fmat2x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x3<f32> fmat2x3;$/;"	t	namespace:glm
fmat2x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat2x4<f32> fmat2x4;$/;"	t	namespace:glm
fmat3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x3<f32> fmat3;$/;"	t	namespace:glm
fmat3x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x2<f32> fmat3x2;$/;"	t	namespace:glm
fmat3x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x3<f32> fmat3x3;$/;"	t	namespace:glm
fmat3x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat3x4<f32> fmat3x4;$/;"	t	namespace:glm
fmat4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x4<f32> fmat4;$/;"	t	namespace:glm
fmat4x2	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x2<f32> fmat4x2;$/;"	t	namespace:glm
fmat4x3	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x3<f32> fmat4x3;$/;"	t	namespace:glm
fmat4x4	glm/gtc/type_precision.hpp	/^	typedef detail::tmat4x4<f32> fmat4x4;$/;"	t	namespace:glm
fquat	glm/gtc/quaternion.hpp	/^	typedef detail::tquat<float>	fquat;$/;"	t	namespace:glm
fragmentShaderId	rendering/BaseShader.hpp	/^        GLuint fragmentShaderId;$/;"	m	class:rendering::BaseShader
frame	tracking/Pattern.hpp	/^  cv::Mat                   frame;$/;"	m	struct:Pattern
frameEnded	tst/MinimalOgre.cpp	/^    bool frameEnded(const FrameEvent& evt) $/;"	f	class:SimpleFrameListener
frameStarted	tst/MinimalOgre.cpp	/^    bool frameStarted(const FrameEvent& evt) $/;"	f	class:SimpleFrameListener
frontPatternImg	tst/main.cpp	/^    cv::Mat frontPatternImg;$/;"	m	class:IlluminationWindow	file:
fvec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<float> fvec1;$/;"	t	namespace:glm
fvec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<float> fvec2;$/;"	t	namespace:glm
fvec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<float> fvec3;$/;"	t	namespace:glm
fvec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<float> fvec4;$/;"	t	namespace:glm
fx	tracking/CameraCalibration.cpp	/^float CameraCalibration::fx() const$/;"	f	class:CameraCalibration
fx	tracking/CameraCalibration.cpp	/^float& CameraCalibration::fx()$/;"	f	class:CameraCalibration
fy	tracking/CameraCalibration.cpp	/^float CameraCalibration::fy() const$/;"	f	class:CameraCalibration
fy	tracking/CameraCalibration.cpp	/^float& CameraCalibration::fy()$/;"	f	class:CameraCalibration
g	glm/core/type_vec2.hpp	/^			struct{value_type r, g;};$/;"	m	struct:glm::detail::tvec2::__anon18::__anon19
g	glm/core/type_vec2.hpp	/^		union {value_type y, g, t;};$/;"	m	union:glm::detail::tvec2::__anon23
g	glm/core/type_vec3.hpp	/^			struct{value_type r, g, b;};$/;"	m	struct:glm::detail::tvec3::__anon3::__anon4
g	glm/core/type_vec3.hpp	/^		union {value_type y, g, t;};$/;"	m	union:glm::detail::tvec3::__anon8
g	glm/core/type_vec4.hpp	/^			struct{value_type r, g, b, a;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon11
g	glm/core/type_vec4.hpp	/^		union {value_type y, g, t;};$/;"	m	union:glm::detail::tvec4::__anon15
g_running	tst/irrlicht_render.cpp	/^bool g_running = true;$/;"	v
genType	glm/core/type_gentype.hpp	/^	struct genType$/;"	s	namespace:glm::detail
getDistorsion	tracking/CameraCalibration.cpp	/^const cv::Mat_<float>&  CameraCalibration::getDistorsion() const$/;"	f	class:CameraCalibration
getGlmMat44	tracking/GeometryTypes.cpp	/^glm::mat4 Transformation::getGlmMat44() const$/;"	f	class:Transformation
getGray	tracking/PatternDetector.cpp	/^void PatternDetector::getGray(const cv::Mat& image, cv::Mat& gray)$/;"	f	class:PatternDetector
getIntrinsic	tracking/CameraCalibration.cpp	/^const cv::Matx33f& CameraCalibration::getIntrinsic() const$/;"	f	class:CameraCalibration
getInverted	tracking/GeometryTypes.cpp	/^Transformation Transformation::getInverted() const$/;"	f	class:Transformation
getInvertedRT	tracking/GeometryTypes.cpp	/^Matrix44 Matrix44::getInvertedRT() const$/;"	f	class:Matrix44
getMat44	tracking/GeometryTypes.cpp	/^Matrix44 Transformation::getMat44() const$/;"	f	class:Transformation
getMatches	tracking/PatternDetector.cpp	/^void PatternDetector::getMatches(const cv::Mat& queryDescriptors, std::vector<cv::DMatch>& matches)$/;"	f	class:PatternDetector
getMatchesImage	tracking/DebugHelpers.hpp	/^    inline cv::Mat getMatchesImage(cv::Mat query, cv::Mat pattern, const std::vector<cv::KeyPoint>& queryKp, const std::vector<cv::KeyPoint>& trainKp, std::vector<cv::DMatch> matches, int maxMatchesDrawn)$/;"	f	namespace:cv
getPatternLocation	tracking/ARPipeline.cpp	/^const Transformation& ARPipeline::getPatternLocation() const$/;"	f	class:ARPipeline
getProjectionMatrix	rendering/BaseCamera.cpp	/^	mat4 BaseCamera::getProjectionMatrix()$/;"	f	class:rendering::BaseCamera
getTransposed	tracking/GeometryTypes.cpp	/^Matrix33 Matrix33::getTransposed() const$/;"	f	class:Matrix33
getTransposed	tracking/GeometryTypes.cpp	/^Matrix44 Matrix44::getTransposed() const$/;"	f	class:Matrix44
getViewMatrix	rendering/BaseCamera.cpp	/^	mat4 BaseCamera::getViewMatrix()$/;"	f	class:rendering::BaseCamera
getViewProjectionMatrix	rendering/BaseCamera.cpp	/^	mat4 BaseCamera::getViewProjectionMatrix()$/;"	f	class:rendering::BaseCamera
glm	glm/core/_detail.hpp	/^namespace glm{$/;"	n
glm	glm/core/_swizzle.hpp	/^namespace glm$/;"	n
glm	glm/core/_swizzle.hpp	/^namespace glm{$/;"	n
glm	glm/core/func_common.hpp	/^namespace glm$/;"	n
glm	glm/core/func_exponential.hpp	/^namespace glm$/;"	n
glm	glm/core/func_geometric.hpp	/^namespace glm$/;"	n
glm	glm/core/func_integer.hpp	/^namespace glm$/;"	n
glm	glm/core/func_matrix.hpp	/^namespace glm$/;"	n
glm	glm/core/func_noise.hpp	/^namespace glm$/;"	n
glm	glm/core/func_packing.hpp	/^namespace glm$/;"	n
glm	glm/core/func_trigonometric.hpp	/^namespace glm$/;"	n
glm	glm/core/func_vector_relational.hpp	/^namespace glm$/;"	n
glm	glm/core/hint.hpp	/^namespace glm$/;"	n
glm	glm/core/intrinsic_common.hpp	/^namespace glm{$/;"	n
glm	glm/core/intrinsic_exponential.hpp	/^namespace glm{$/;"	n
glm	glm/core/intrinsic_geometric.hpp	/^namespace glm{$/;"	n
glm	glm/core/intrinsic_matrix.hpp	/^namespace glm{$/;"	n
glm	glm/core/intrinsic_trigonometric.hpp	/^namespace glm{$/;"	n
glm	glm/core/intrinsic_vector_relational.hpp	/^namespace glm{$/;"	n
glm	glm/core/type.hpp	/^namespace glm$/;"	n
glm	glm/core/type_float.hpp	/^namespace glm$/;"	n
glm	glm/core/type_gentype.hpp	/^namespace glm$/;"	n
glm	glm/core/type_half.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_int.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_mat.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_mat2x2.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_mat2x3.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_mat2x4.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_mat3x2.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_mat3x3.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_mat3x4.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_mat4x2.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_mat4x3.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_mat4x4.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_size.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_vec.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_vec1.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_vec2.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_vec3.hpp	/^namespace glm{$/;"	n
glm	glm/core/type_vec4.hpp	/^namespace glm{$/;"	n
glm	glm/gtc/constants.hpp	/^namespace glm$/;"	n
glm	glm/gtc/epsilon.hpp	/^namespace glm$/;"	n
glm	glm/gtc/half_float.hpp	/^namespace glm{$/;"	n
glm	glm/gtc/matrix_access.hpp	/^namespace glm$/;"	n
glm	glm/gtc/matrix_integer.hpp	/^namespace glm$/;"	n
glm	glm/gtc/matrix_inverse.hpp	/^namespace glm$/;"	n
glm	glm/gtc/matrix_transform.hpp	/^namespace glm$/;"	n
glm	glm/gtc/noise.hpp	/^namespace glm$/;"	n
glm	glm/gtc/quaternion.hpp	/^namespace glm{$/;"	n
glm	glm/gtc/random.hpp	/^namespace glm$/;"	n
glm	glm/gtc/reciprocal.hpp	/^namespace glm$/;"	n
glm	glm/gtc/swizzle.hpp	/^namespace glm$/;"	n
glm	glm/gtc/type_precision.hpp	/^namespace glm$/;"	n
glm	glm/gtc/type_ptr.hpp	/^namespace glm$/;"	n
glm	glm/gtc/ulp.hpp	/^namespace glm$/;"	n
glm	glm/gtx/associated_min_max.hpp	/^namespace glm$/;"	n
glm	glm/gtx/bit.hpp	/^namespace glm$/;"	n
glm	glm/gtx/closest_point.hpp	/^namespace glm$/;"	n
glm	glm/gtx/color_cast.hpp	/^namespace glm$/;"	n
glm	glm/gtx/color_space.hpp	/^namespace glm$/;"	n
glm	glm/gtx/color_space_YCoCg.hpp	/^namespace glm$/;"	n
glm	glm/gtx/compatibility.hpp	/^namespace glm$/;"	n
glm	glm/gtx/component_wise.hpp	/^namespace glm$/;"	n
glm	glm/gtx/euler_angles.hpp	/^namespace glm$/;"	n
glm	glm/gtx/extend.hpp	/^namespace glm$/;"	n
glm	glm/gtx/extented_min_max.hpp	/^namespace glm$/;"	n
glm	glm/gtx/fast_exponential.hpp	/^namespace glm$/;"	n
glm	glm/gtx/fast_square_root.hpp	/^namespace glm$/;"	n
glm	glm/gtx/fast_trigonometry.hpp	/^namespace glm$/;"	n
glm	glm/gtx/gradient_paint.hpp	/^namespace glm$/;"	n
glm	glm/gtx/handed_coordinate_space.hpp	/^namespace glm$/;"	n
glm	glm/gtx/inertia.hpp	/^namespace glm$/;"	n
glm	glm/gtx/int_10_10_10_2.hpp	/^namespace glm$/;"	n
glm	glm/gtx/integer.hpp	/^namespace glm$/;"	n
glm	glm/gtx/intersect.hpp	/^namespace glm$/;"	n
glm	glm/gtx/log_base.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_cross_product.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_interpolation.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_major_storage.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_operation.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_query.hpp	/^namespace glm$/;"	n
glm	glm/gtx/mixed_product.hpp	/^namespace glm$/;"	n
glm	glm/gtx/multiple.hpp	/^namespace glm$/;"	n
glm	glm/gtx/norm.hpp	/^namespace glm$/;"	n
glm	glm/gtx/normal.hpp	/^namespace glm$/;"	n
glm	glm/gtx/normalize_dot.hpp	/^namespace glm$/;"	n
glm	glm/gtx/number_precision.hpp	/^namespace glm{$/;"	n
glm	glm/gtx/ocl_type.hpp	/^namespace glm{$/;"	n
glm	glm/gtx/optimum_pow.hpp	/^namespace glm{$/;"	n
glm	glm/gtx/orthonormalize.hpp	/^namespace glm$/;"	n
glm	glm/gtx/perpendicular.hpp	/^namespace glm$/;"	n
glm	glm/gtx/polar_coordinates.hpp	/^namespace glm$/;"	n
glm	glm/gtx/projection.hpp	/^namespace glm$/;"	n
glm	glm/gtx/quaternion.hpp	/^namespace glm$/;"	n
glm	glm/gtx/raw_data.hpp	/^namespace glm$/;"	n
glm	glm/gtx/rotate_vector.hpp	/^namespace glm$/;"	n
glm	glm/gtx/simd_mat4.hpp	/^namespace glm{$/;"	n
glm	glm/gtx/simd_vec4.hpp	/^namespace glm{$/;"	n
glm	glm/gtx/spline.hpp	/^namespace glm$/;"	n
glm	glm/gtx/std_based_type.hpp	/^namespace glm$/;"	n
glm	glm/gtx/string_cast.hpp	/^namespace glm$/;"	n
glm	glm/gtx/transform.hpp	/^namespace glm$/;"	n
glm	glm/gtx/transform2.hpp	/^namespace glm$/;"	n
glm	glm/gtx/vec1.hpp	/^namespace glm$/;"	n
glm	glm/gtx/vector_access.hpp	/^namespace glm$/;"	n
glm	glm/gtx/vector_angle.hpp	/^namespace glm$/;"	n
glm	glm/gtx/vector_query.hpp	/^namespace glm$/;"	n
glm	glm/gtx/verbose_operator.hpp	/^namespace glm$/;"	n
glm	glm/gtx/wrap.hpp	/^namespace glm$/;"	n
glm_core_detail	glm/core/_detail.hpp	30;"	d
glm_core_func_exponential	glm/core/func_exponential.hpp	37;"	d
glm_core_func_geometric	glm/core/func_geometric.hpp	37;"	d
glm_core_func_integer	glm/core/func_integer.hpp	39;"	d
glm_core_func_noise	glm/core/func_noise.hpp	39;"	d
glm_core_intrinsic_geometric	glm/core/intrinsic_geometric.hpp	30;"	d
glm_core_swizzle	glm/core/_swizzle.hpp	30;"	d
glm_core_swizzle_func	glm/core/_swizzle_func.hpp	30;"	d
glm_core_type	glm/core/hint.hpp	30;"	d
glm_core_type	glm/core/type.hpp	30;"	d
glm_core_type_float	glm/core/type_float.hpp	30;"	d
glm_core_type_gentype	glm/core/type_gentype.hpp	30;"	d
glm_core_type_gentype1	glm/core/type_vec1.hpp	30;"	d
glm_core_type_gentype2	glm/core/type_vec2.hpp	30;"	d
glm_core_type_gentype3	glm/core/type_vec3.hpp	30;"	d
glm_core_type_gentype4	glm/core/type_vec4.hpp	30;"	d
glm_core_type_half	glm/core/type_half.hpp	30;"	d
glm_core_type_int	glm/core/type_int.hpp	30;"	d
glm_core_type_mat	glm/core/type_mat.hpp	30;"	d
glm_core_type_mat2x2	glm/core/type_mat2x2.hpp	30;"	d
glm_core_type_mat2x3	glm/core/type_mat2x3.hpp	30;"	d
glm_core_type_mat2x4	glm/core/type_mat2x4.hpp	30;"	d
glm_core_type_mat3x2	glm/core/type_mat3x2.hpp	30;"	d
glm_core_type_mat3x3	glm/core/type_mat3x3.hpp	30;"	d
glm_core_type_mat3x4	glm/core/type_mat3x4.hpp	30;"	d
glm_core_type_mat4x2	glm/core/type_mat4x2.hpp	30;"	d
glm_core_type_mat4x3	glm/core/type_mat4x3.hpp	30;"	d
glm_core_type_mat4x4	glm/core/type_mat4x4.hpp	30;"	d
glm_core_type_size	glm/core/type_size.hpp	30;"	d
glm_core_type_vec	glm/core/type_vec.hpp	30;"	d
glm_detail_intrinsic_common	glm/core/intrinsic_common.hpp	30;"	d
glm_detail_intrinsic_exponential	glm/core/intrinsic_exponential.hpp	30;"	d
glm_detail_intrinsic_matrix	glm/core/intrinsic_matrix.hpp	30;"	d
glm_detail_intrinsic_trigonometric	glm/core/intrinsic_trigonometric.hpp	30;"	d
glm_detail_intrinsic_vector_relational	glm/core/intrinsic_vector_relational.hpp	30;"	d
glm_ext	glm/ext.hpp	59;"	d
glm_glm	glm/glm.hpp	81;"	d
glm_gtx_color_space_YCoCg	glm/gtx/color_space_YCoCg.hpp	39;"	d
glm_setup	glm/core/setup.hpp	30;"	d
goBack	rendering/BaseCamera.cpp	/^	void BaseCamera::goBack( float _step )$/;"	f	class:rendering::BaseCamera
goFront	rendering/BaseCamera.cpp	/^	void BaseCamera::goFront( float _step )$/;"	f	class:rendering::BaseCamera
grayImg	tracking/Pattern.hpp	/^  cv::Mat                   grayImg;$/;"	m	struct:Pattern
gtx	glm/gtx/number_precision.hpp	/^namespace gtx$/;"	n	namespace:glm
gtx	glm/gtx/ocl_type.hpp	/^namespace gtx$/;"	n	namespace:glm
gtx	glm/gtx/optimum_pow.hpp	/^namespace gtx$/;"	n	namespace:glm
half	glm/core/type_half.hpp	/^	class half$/;"	c	namespace:glm::detail
half	glm/gtc/half_float.hpp	/^	typedef detail::half					half;$/;"	t	namespace:glm
half1	glm/gtx/compatibility.hpp	/^	typedef detail::half					half1;			\/\/!< \\brief half-precision floating-point vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half1x1	glm/gtx/compatibility.hpp	/^	typedef detail::half					half1x1;		\/\/!< \\brief half-precision floating-point matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half2	glm/gtx/compatibility.hpp	/^	typedef detail::tvec2<detail::half>	half2;			\/\/!< \\brief half-precision floating-point vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half2x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x2<detail::half>	half2x2;		\/\/!< \\brief half-precision floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half2x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x3<detail::half>	half2x3;		\/\/!< \\brief half-precision floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half2x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x4<detail::half>	half2x4;		\/\/!< \\brief half-precision floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half3	glm/gtx/compatibility.hpp	/^	typedef detail::tvec3<detail::half>	half3;			\/\/!< \\brief half-precision floating-point vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half3x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x2<detail::half>	half3x2;		\/\/!< \\brief half-precision floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half3x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x3<detail::half>	half3x3;		\/\/!< \\brief half-precision floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half3x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x4<detail::half>	half3x4;		\/\/!< \\brief half-precision floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half4	glm/gtx/compatibility.hpp	/^	typedef detail::tvec4<detail::half>	half4;			\/\/!< \\brief half-precision floating-point vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half4x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x2<detail::half>	half4x2;		\/\/!< \\brief half-precision floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half4x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x3<detail::half>	half4x3;		\/\/!< \\brief half-precision floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
half4x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x4<detail::half>	half4x4;		\/\/!< \\brief half-precision floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
hdata	glm/core/type_half.hpp	/^	typedef short hdata;$/;"	t	namespace:glm::detail
height	rendering/RenderingWindow.hpp	/^			int height;$/;"	m	class:rendering::RenderingWindow
highp_float	glm/core/type_float.hpp	/^	typedef highp_float_t		highp_float;$/;"	t	namespace:glm
highp_float_t	glm/core/type_float.hpp	/^	typedef double				highp_float_t;$/;"	t	namespace:glm
highp_imat2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<highp_int>				highp_imat2;	$/;"	t	namespace:glm
highp_imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<highp_int>				highp_imat2x2;$/;"	t	namespace:glm
highp_imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x3<highp_int>				highp_imat2x3;$/;"	t	namespace:glm
highp_imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x4<highp_int>				highp_imat2x4;$/;"	t	namespace:glm
highp_imat3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<highp_int>				highp_imat3;$/;"	t	namespace:glm
highp_imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x2<highp_int>				highp_imat3x2;$/;"	t	namespace:glm
highp_imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<highp_int>				highp_imat3x3;$/;"	t	namespace:glm
highp_imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x4<highp_int>				highp_imat3x4;$/;"	t	namespace:glm
highp_imat4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<highp_int>				highp_imat4;$/;"	t	namespace:glm
highp_imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x2<highp_int>				highp_imat4x2;$/;"	t	namespace:glm
highp_imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x3<highp_int>				highp_imat4x3;$/;"	t	namespace:glm
highp_imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<highp_int>				highp_imat4x4;$/;"	t	namespace:glm
highp_int	glm/core/type_int.hpp	/^	typedef detail::highp_int_t				highp_int;$/;"	t	namespace:glm
highp_int_t	glm/core/type_int.hpp	/^	typedef sint64					highp_int_t;$/;"	t	namespace:glm::detail
highp_ivec1	glm/gtx/vec1.hpp	/^	typedef detail::highp_ivec1_t			highp_ivec1;$/;"	t	namespace:glm
highp_ivec1_t	glm/core/type_vec1.hpp	/^	typedef detail::tvec1<highp_int>		highp_ivec1_t;$/;"	t	namespace:glm::detail
highp_ivec2	glm/core/type_vec2.hpp	/^	typedef detail::tvec2<highp_int>		highp_ivec2;$/;"	t	namespace:glm
highp_ivec3	glm/core/type_vec3.hpp	/^	typedef detail::tvec3<highp_int>		highp_ivec3;$/;"	t	namespace:glm
highp_ivec4	glm/core/type_vec4.hpp	/^	typedef detail::tvec4<highp_int>		highp_ivec4;$/;"	t	namespace:glm
highp_mat2	glm/core/type_mat2x2.hpp	/^	typedef detail::tmat2x2<highp_float>	highp_mat2;$/;"	t	namespace:glm
highp_mat2x2	glm/core/type_mat2x2.hpp	/^	typedef detail::tmat2x2<highp_float>	highp_mat2x2;$/;"	t	namespace:glm
highp_mat2x3	glm/core/type_mat2x3.hpp	/^	typedef detail::tmat2x3<highp_float>	highp_mat2x3;$/;"	t	namespace:glm
highp_mat2x4	glm/core/type_mat2x4.hpp	/^	typedef detail::tmat2x4<highp_float>	highp_mat2x4;$/;"	t	namespace:glm
highp_mat3	glm/core/type_mat3x3.hpp	/^	typedef detail::tmat3x3<highp_float>	highp_mat3;$/;"	t	namespace:glm
highp_mat3x2	glm/core/type_mat3x2.hpp	/^	typedef detail::tmat3x2<highp_float>	highp_mat3x2;$/;"	t	namespace:glm
highp_mat3x3	glm/core/type_mat3x3.hpp	/^	typedef detail::tmat3x3<highp_float>	highp_mat3x3;$/;"	t	namespace:glm
highp_mat3x4	glm/core/type_mat3x4.hpp	/^	typedef detail::tmat3x4<highp_float>	highp_mat3x4;$/;"	t	namespace:glm
highp_mat4	glm/core/type_mat4x4.hpp	/^	typedef detail::tmat4x4<highp_float>	highp_mat4;$/;"	t	namespace:glm
highp_mat4x2	glm/core/type_mat4x2.hpp	/^	typedef detail::tmat4x2<highp_float>	highp_mat4x2;$/;"	t	namespace:glm
highp_mat4x3	glm/core/type_mat4x3.hpp	/^	typedef detail::tmat4x3<highp_float>	highp_mat4x3;$/;"	t	namespace:glm
highp_mat4x4	glm/core/type_mat4x4.hpp	/^	typedef detail::tmat4x4<highp_float>	highp_mat4x4;$/;"	t	namespace:glm
highp_quat	glm/gtc/quaternion.hpp	/^	typedef detail::tquat<highp_float>		highp_quat;$/;"	t	namespace:glm
highp_uint	glm/core/type_int.hpp	/^	typedef detail::highp_uint_t				highp_uint;$/;"	t	namespace:glm
highp_uint_t	glm/core/type_int.hpp	/^	typedef uint64					highp_uint_t;$/;"	t	namespace:glm::detail
highp_umat2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<highp_uint>				highp_umat2;	$/;"	t	namespace:glm
highp_umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<highp_uint>				highp_umat2x2;$/;"	t	namespace:glm
highp_umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x3<highp_uint>				highp_umat2x3;$/;"	t	namespace:glm
highp_umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x4<highp_uint>				highp_umat2x4;$/;"	t	namespace:glm
highp_umat3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<highp_uint>				highp_umat3;$/;"	t	namespace:glm
highp_umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x2<highp_uint>				highp_umat3x2;$/;"	t	namespace:glm
highp_umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<highp_uint>				highp_umat3x3;$/;"	t	namespace:glm
highp_umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x4<highp_uint>				highp_umat3x4;$/;"	t	namespace:glm
highp_umat4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<highp_uint>				highp_umat4;$/;"	t	namespace:glm
highp_umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x2<highp_uint>				highp_umat4x2;$/;"	t	namespace:glm
highp_umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x3<highp_uint>				highp_umat4x3;$/;"	t	namespace:glm
highp_umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<highp_uint>				highp_umat4x4;$/;"	t	namespace:glm
highp_uvec1	glm/gtx/vec1.hpp	/^	typedef detail::highp_uvec1_t			highp_uvec1;$/;"	t	namespace:glm
highp_uvec1_t	glm/core/type_vec1.hpp	/^	typedef detail::tvec1<highp_uint>		highp_uvec1_t;$/;"	t	namespace:glm::detail
highp_uvec2	glm/core/type_vec2.hpp	/^	typedef detail::tvec2<highp_uint>		highp_uvec2;$/;"	t	namespace:glm
highp_uvec3	glm/core/type_vec3.hpp	/^	typedef detail::tvec3<highp_uint>		highp_uvec3;$/;"	t	namespace:glm
highp_uvec4	glm/core/type_vec4.hpp	/^	typedef detail::tvec4<highp_uint>		highp_uvec4;$/;"	t	namespace:glm
highp_vec1	glm/gtx/vec1.hpp	/^	typedef detail::highp_vec1_t			highp_vec1;$/;"	t	namespace:glm
highp_vec1_t	glm/core/type_vec1.hpp	/^	typedef detail::tvec1<highp_float>		highp_vec1_t;$/;"	t	namespace:glm::detail
highp_vec2	glm/core/type_vec2.hpp	/^	typedef detail::tvec2<highp_float>		highp_vec2;$/;"	t	namespace:glm
highp_vec3	glm/core/type_vec3.hpp	/^	typedef detail::tvec3<highp_float>		highp_vec3;$/;"	t	namespace:glm
highp_vec4	glm/core/type_vec4.hpp	/^	typedef detail::tvec4<highp_float>		highp_vec4;$/;"	t	namespace:glm
hmat2	glm/gtc/half_float.hpp	/^	typedef detail::tmat2x2<detail::half>	hmat2;$/;"	t	namespace:glm
hmat2x2	glm/gtc/half_float.hpp	/^	typedef detail::tmat2x2<detail::half>	hmat2x2;$/;"	t	namespace:glm
hmat2x3	glm/gtc/half_float.hpp	/^	typedef detail::tmat2x3<detail::half>	hmat2x3;$/;"	t	namespace:glm
hmat2x4	glm/gtc/half_float.hpp	/^	typedef detail::tmat2x4<detail::half>	hmat2x4;$/;"	t	namespace:glm
hmat3	glm/gtc/half_float.hpp	/^	typedef detail::tmat3x3<detail::half>	hmat3;$/;"	t	namespace:glm
hmat3x2	glm/gtc/half_float.hpp	/^	typedef detail::tmat3x2<detail::half>	hmat3x2;$/;"	t	namespace:glm
hmat3x3	glm/gtc/half_float.hpp	/^	typedef detail::tmat3x3<detail::half>	hmat3x3;$/;"	t	namespace:glm
hmat3x4	glm/gtc/half_float.hpp	/^	typedef detail::tmat3x4<detail::half>	hmat3x4;$/;"	t	namespace:glm
hmat4	glm/gtc/half_float.hpp	/^	typedef detail::tmat4x4<detail::half>	hmat4;$/;"	t	namespace:glm
hmat4x2	glm/gtc/half_float.hpp	/^	typedef detail::tmat4x2<detail::half>	hmat4x2;    $/;"	t	namespace:glm
hmat4x3	glm/gtc/half_float.hpp	/^	typedef detail::tmat4x3<detail::half>	hmat4x3;$/;"	t	namespace:glm
hmat4x4	glm/gtc/half_float.hpp	/^	typedef detail::tmat4x4<detail::half>	hmat4x4;$/;"	t	namespace:glm
homography	tracking/Pattern.hpp	/^  cv::Mat                   homography;$/;"	m	struct:PatternTrackingInfo
homographyReprojectionThreshold	tracking/PatternDetector.hpp	/^    float homographyReprojectionThreshold;$/;"	m	class:PatternDetector
hquat	glm/gtc/quaternion.hpp	/^	typedef detail::tquat<detail::half>	hquat;$/;"	t	namespace:glm
hvec2	glm/gtc/half_float.hpp	/^	typedef detail::tvec2<detail::half>	hvec2;$/;"	t	namespace:glm
hvec3	glm/gtc/half_float.hpp	/^	typedef detail::tvec3<detail::half>	hvec3;$/;"	t	namespace:glm
hvec4	glm/gtc/half_float.hpp	/^	typedef detail::tvec4<detail::half>	hvec4;$/;"	t	namespace:glm
i	glm/core/_detail.hpp	/^		uint64 i;$/;"	m	union:glm::detail::uif64
i	glm/core/_detail.hpp	/^		unsigned int i;$/;"	m	union:glm::detail::uif32
i16	glm/gtc/type_precision.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm
i16vec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<i16> i16vec1;$/;"	t	namespace:glm
i16vec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<i16> i16vec2;$/;"	t	namespace:glm
i16vec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<i16> i16vec3;$/;"	t	namespace:glm
i16vec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<i16> i16vec4;$/;"	t	namespace:glm
i32	glm/gtc/type_precision.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm
i32vec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<i32> i32vec1;$/;"	t	namespace:glm
i32vec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<i32> i32vec2;$/;"	t	namespace:glm
i32vec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<i32> i32vec3;$/;"	t	namespace:glm
i32vec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<i32> i32vec4;$/;"	t	namespace:glm
i64	glm/gtc/type_precision.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm
i64vec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<i64> i64vec1;$/;"	t	namespace:glm
i64vec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<i64> i64vec2;$/;"	t	namespace:glm
i64vec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<i64> i64vec3;$/;"	t	namespace:glm
i64vec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<i64> i64vec4;$/;"	t	namespace:glm
i8	glm/gtc/type_precision.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm
i8vec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<i8> i8vec1;$/;"	t	namespace:glm
i8vec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<i8> i8vec2;$/;"	t	namespace:glm
i8vec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<i8> i8vec3;$/;"	t	namespace:glm
i8vec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<i8> i8vec4;$/;"	t	namespace:glm
identity	tracking/GeometryTypes.cpp	/^Matrix33 Matrix33::identity()$/;"	f	class:Matrix33
identity	tracking/GeometryTypes.cpp	/^Matrix44 Matrix44::identity()$/;"	f	class:Matrix44
idle	rendering/RenderingWindow.cpp	/^	void RenderingWindow::idle()$/;"	f	class:rendering::RenderingWindow
idle	tst/main.cpp	/^    virtual void idle() {$/;"	f	class:IlluminationWindow
idle	tst/tst-render.cpp	/^		virtual void idle()$/;"	f	class:IlluminationWindow
idleWrapper	rendering/RenderingWindow.cpp	/^	void RenderingWindow::idleWrapper()$/;"	f	class:rendering::RenderingWindow
imageData	rendering/Sprite.hpp	/^        void* imageData;$/;"	m	class:rendering::Sprite
imageHeight	rendering/Sprite.hpp	/^        int imageHeight;$/;"	m	class:rendering::Sprite
imageWidth	rendering/Sprite.hpp	/^        int imageWidth;$/;"	m	class:rendering::Sprite
imat2	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2								imat2;$/;"	t	namespace:glm
imat2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2								imat2;$/;"	t	namespace:glm
imat2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2							imat2;$/;"	t	namespace:glm
imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x2							imat2x2;$/;"	t	namespace:glm
imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x2							imat2x2;$/;"	t	namespace:glm
imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x2							imat2x2;$/;"	t	namespace:glm
imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x3							imat2x3;$/;"	t	namespace:glm
imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x3							imat2x3;$/;"	t	namespace:glm
imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x3							imat2x3;$/;"	t	namespace:glm
imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x4							imat2x4;$/;"	t	namespace:glm
imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x4							imat2x4;$/;"	t	namespace:glm
imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x4							imat2x4;$/;"	t	namespace:glm
imat3	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3								imat3;$/;"	t	namespace:glm
imat3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3								imat3;$/;"	t	namespace:glm
imat3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3							imat3;$/;"	t	namespace:glm
imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x2							imat3x2;$/;"	t	namespace:glm
imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x2							imat3x2;$/;"	t	namespace:glm
imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x2							imat3x2;$/;"	t	namespace:glm
imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x3							imat3x3;$/;"	t	namespace:glm
imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x3							imat3x3;$/;"	t	namespace:glm
imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x3							imat3x3;$/;"	t	namespace:glm
imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x4							imat3x4;$/;"	t	namespace:glm
imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x4							imat3x4;$/;"	t	namespace:glm
imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x4							imat3x4;$/;"	t	namespace:glm
imat4	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4								imat4;$/;"	t	namespace:glm
imat4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4								imat4;$/;"	t	namespace:glm
imat4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4							imat4;$/;"	t	namespace:glm
imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x2							imat4x2;$/;"	t	namespace:glm
imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x2							imat4x2;$/;"	t	namespace:glm
imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x2							imat4x2;$/;"	t	namespace:glm
imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x3							imat4x3;$/;"	t	namespace:glm
imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x3							imat4x3;$/;"	t	namespace:glm
imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x3							imat4x3;$/;"	t	namespace:glm
imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x4							imat4x4;$/;"	t	namespace:glm
imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x4							imat4x4;$/;"	t	namespace:glm
imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x4							imat4x4;$/;"	t	namespace:glm
initBuffers	rendering/Mesh.cpp	/^    void Mesh::initBuffers( BaseShader& _shader, BaseShader& _shadowMapShader ) {$/;"	f	class:rendering::Mesh
initDataFromImagePath	rendering/Sprite.cpp	/^    void Sprite::initDataFromImagePath(const char* _img_path) {$/;"	f	class:rendering::Sprite
initGeometry	rendering/MarkerMesh.cpp	/^    void MarkerMesh::initGeometry() {$/;"	f	class:rendering::MarkerMesh
initGeometry	rendering/Sprite.cpp	/^    void Sprite::initGeometry() {$/;"	f	class:rendering::Sprite
initShadowMapBuffer	rendering/RenderingManager.cpp	/^    void RenderingManager::initShadowMapBuffer() {$/;"	f	class:rendering::RenderingManager
instance	rendering/RenderingWindow.cpp	/^	RenderingWindow* RenderingWindow::instance = NULL;$/;"	m	class:rendering::RenderingWindow	file:
instance	rendering/RenderingWindow.hpp	/^			static RenderingWindow* instance;$/;"	m	class:rendering::RenderingWindow
int1	glm/gtx/compatibility.hpp	/^	typedef int							int1;			\/\/!< \\brief integer vector with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int16	glm/core/_detail.hpp	/^	typedef signed short						int16;$/;"	t	namespace:glm::detail
int16	glm/gtc/type_precision.hpp	/^	typedef detail::int16 int16;$/;"	t	namespace:glm
int16_t	glm/gtc/type_precision.hpp	/^	typedef detail::int16 int16_t;$/;"	t	namespace:glm
int1x1	glm/gtx/compatibility.hpp	/^	typedef int							int1x1;			\/\/!< \\brief integer matrix with 1 component. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2	glm/gtx/compatibility.hpp	/^	typedef detail::tvec2<int>			int2;			\/\/!< \\brief integer vector with 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x2<int>		int2x2;			\/\/!< \\brief integer matrix with 2 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x3<int>		int2x3;			\/\/!< \\brief integer matrix with 2 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int2x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat2x4<int>		int2x4;			\/\/!< \\brief integer matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int3	glm/gtx/compatibility.hpp	/^	typedef detail::tvec3<int>			int3;			\/\/!< \\brief integer vector with 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int32	glm/core/_detail.hpp	/^	typedef signed int							int32;$/;"	t	namespace:glm::detail
int32	glm/gtc/type_precision.hpp	/^	typedef detail::int32 int32;$/;"	t	namespace:glm
int32_t	glm/gtc/type_precision.hpp	/^	typedef detail::int32 int32_t;$/;"	t	namespace:glm
int3x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x2<int>		int3x2;			\/\/!< \\brief integer matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int3x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x3<int>		int3x3;			\/\/!< \\brief integer matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int3x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat3x4<int>		int3x4;			\/\/!< \\brief integer matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4	glm/gtx/compatibility.hpp	/^	typedef detail::tvec4<int>			int4;			\/\/!< \\brief integer vector with 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4x2	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x2<int>		int4x2;			\/\/!< \\brief integer matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4x3	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x3<int>		int4x3;			\/\/!< \\brief integer matrix with 4 x 3 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int4x4	glm/gtx/compatibility.hpp	/^	typedef detail::tmat4x4<int>		int4x4;			\/\/!< \\brief integer matrix with 4 x 4 components. (From GLM_GTX_compatibility extension)$/;"	t	namespace:glm
int64	glm/core/_detail.hpp	/^	typedef detail::sint64						int64;$/;"	t	namespace:glm::detail
int64	glm/gtc/type_precision.hpp	/^	typedef detail::int64 int64;$/;"	t	namespace:glm
int64_t	glm/gtc/type_precision.hpp	/^	typedef detail::int64 int64_t;$/;"	t	namespace:glm
int8	glm/core/_detail.hpp	/^	typedef signed char							int8;$/;"	t	namespace:glm::detail
int8	glm/gtc/type_precision.hpp	/^	typedef detail::int8 int8;$/;"	t	namespace:glm
int8_t	glm/gtc/type_precision.hpp	/^	typedef detail::int8 int8_t;$/;"	t	namespace:glm
int_t	glm/core/type_int.hpp	/^	typedef highp_int					int_t;$/;"	t	namespace:glm
int_t	glm/core/type_int.hpp	/^	typedef lowp_int					int_t;$/;"	t	namespace:glm
int_t	glm/core/type_int.hpp	/^	typedef mediump_int                 int_t;$/;"	t	namespace:glm
isActive	rendering/RenderableObject.hpp	/^        bool isActive;$/;"	m	class:rendering::RenderableObject
isFrontVisible	tracking/ARPipeline.hpp	/^    bool isFrontVisible;$/;"	m	class:ARPipeline
isLeftVisible	tracking/ARPipeline.hpp	/^    bool isLeftVisible;$/;"	m	class:ARPipeline
isPatternPresent	tracking/ARDrawingContext.hpp	/^  bool                isPatternPresent;$/;"	m	class:ARDrawingContext
isRightVisible	tracking/ARPipeline.hpp	/^    bool isRightVisible;$/;"	m	class:ARPipeline
is_bool	glm/core/_detail.hpp	/^			is_bool = is_bool<T>::_YES$/;"	e	enum:glm::detail::type::type_enum
is_bool	glm/core/_detail.hpp	/^	struct is_bool$/;"	s	namespace:glm::detail
is_bool	glm/core/_detail.hpp	/^	struct is_bool<bool>$/;"	s	namespace:glm::detail
is_bool_enum	glm/core/_detail.hpp	/^		enum is_bool_enum$/;"	g	struct:glm::detail::is_bool
is_float	glm/core/_detail.hpp	/^			is_float = is_float<T>::_YES,$/;"	e	enum:glm::detail::type::type_enum
is_float	glm/core/_detail.hpp	/^	struct is_float$/;"	s	namespace:glm::detail
is_float_enum	glm/core/_detail.hpp	/^		enum is_float_enum$/;"	g	struct:glm::detail::is_float
is_int	glm/core/_detail.hpp	/^			is_int = is_int<T>::_YES,$/;"	e	enum:glm::detail::type::type_enum
is_int	glm/core/_detail.hpp	/^	struct is_int$/;"	s	namespace:glm::detail
is_int_enum	glm/core/_detail.hpp	/^		enum is_int_enum$/;"	g	struct:glm::detail::is_int
is_matrix	glm/core/_detail.hpp	/^	struct is_matrix$/;"	s	namespace:glm::detail
is_matrix_enum	glm/core/_detail.hpp	/^		enum is_matrix_enum$/;"	g	struct:glm::detail::is_matrix
is_uint	glm/core/_detail.hpp	/^			is_uint = is_uint<T>::_YES,$/;"	e	enum:glm::detail::type::type_enum
is_uint	glm/core/_detail.hpp	/^	struct is_uint$/;"	s	namespace:glm::detail
is_uint_enum	glm/core/_detail.hpp	/^		enum is_uint_enum$/;"	g	struct:glm::detail::is_uint
is_vector	glm/core/_detail.hpp	/^	struct is_vector$/;"	s	namespace:glm::detail
is_vector	glm/core/type_gentype.hpp	/^	bool genType<VALTYPE, TYPE>::is_vector()$/;"	f	class:glm::detail::genType
is_vector_enum	glm/core/_detail.hpp	/^		enum is_vector_enum$/;"	g	struct:glm::detail::is_vector
isfinite	glm/gtx/compatibility.hpp	56;"	d
isinf	glm/core/_fixes.hpp	48;"	d
isnan	glm/core/_fixes.hpp	43;"	d
ivec1	glm/gtx/vec1.hpp	/^	typedef highp_ivec1			ivec1;$/;"	t	namespace:glm
ivec1	glm/gtx/vec1.hpp	/^	typedef lowp_ivec1			ivec1;$/;"	t	namespace:glm
ivec1	glm/gtx/vec1.hpp	/^	typedef mediump_ivec1		ivec1;$/;"	t	namespace:glm
ivec2	glm/core/type.hpp	/^	typedef highp_ivec2			ivec2;$/;"	t	namespace:glm
ivec2	glm/core/type.hpp	/^	typedef lowp_ivec2			ivec2;$/;"	t	namespace:glm
ivec2	glm/core/type.hpp	/^	typedef mediump_ivec2		ivec2;$/;"	t	namespace:glm
ivec3	glm/core/type.hpp	/^	typedef highp_ivec3			ivec3;$/;"	t	namespace:glm
ivec3	glm/core/type.hpp	/^	typedef lowp_ivec3			ivec3;$/;"	t	namespace:glm
ivec3	glm/core/type.hpp	/^	typedef mediump_ivec3		ivec3;$/;"	t	namespace:glm
ivec4	glm/core/type.hpp	/^	typedef highp_ivec4			ivec4;$/;"	t	namespace:glm
ivec4	glm/core/type.hpp	/^	typedef lowp_ivec4			ivec4;$/;"	t	namespace:glm
ivec4	glm/core/type.hpp	/^	typedef mediump_ivec4		ivec4;$/;"	t	namespace:glm
keyPressed	tst/MinimalOgre.cpp	/^    bool keyPressed(const OIS::KeyEvent& e){ return true; }$/;"	f	class:SimpleKeyListener
keyReleased	tst/MinimalOgre.cpp	/^    bool keyReleased(const OIS::KeyEvent& e){ return true; }$/;"	f	class:SimpleKeyListener
keyboard	rendering/RenderingWindow.cpp	/^	void RenderingWindow::keyboard( unsigned char k, int x, int y )$/;"	f	class:rendering::RenderingWindow
keyboardWrapper	rendering/RenderingWindow.cpp	/^	void RenderingWindow::keyboardWrapper( unsigned char k, int x, int y )$/;"	f	class:rendering::RenderingWindow
keypoints	tracking/Pattern.hpp	/^  std::vector<cv::KeyPoint> keypoints;$/;"	m	struct:Pattern
left	tracking/ARPipeline.cpp	/^bool ARPipeline::left(cv::Point2f a, cv::Point2f b, cv::Point2f c)$/;"	f	class:ARPipeline
leftPatternImg	tst/main.cpp	/^    cv::Mat leftPatternImg;$/;"	m	class:IlluminationWindow	file:
lerp	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER T lerp(T x, T y, T a){return mix(x, y, a);}																					\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec2<T> lerp(const detail::tvec2<T>& x, const detail::tvec2<T>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec2<T> lerp(const detail::tvec2<T>& x, const detail::tvec2<T>& y, const detail::tvec2<T>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec3<T> lerp(const detail::tvec3<T>& x, const detail::tvec3<T>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec3<T> lerp(const detail::tvec3<T>& x, const detail::tvec3<T>& y, const detail::tvec3<T>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec4<T> lerp(const detail::tvec4<T>& x, const detail::tvec4<T>& y, T a){return mix(x, y, a);}							\/\/!< \\brief Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
lerp	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec4<T> lerp(const detail::tvec4<T>& x, const detail::tvec4<T>& y, const detail::tvec4<T>& a){return mix(x, y, a);}	\/\/!< \\brief Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
light	rendering/RenderingManager.hpp	/^        DirectionalLightInfo light;$/;"	m	class:rendering::RenderingManager
lightColor	rendering/Mesh.hpp	/^        vec3 lightColor;$/;"	m	class:rendering::Mesh
lightColorLoc	rendering/Mesh.hpp	/^        GLuint lightColorLoc;$/;"	m	class:rendering::Mesh
lightDirection	rendering/Mesh.hpp	/^        vec3 lightDirection;$/;"	m	class:rendering::Mesh
lightDirectionLoc	rendering/Mesh.hpp	/^        GLuint lightDirectionLoc;$/;"	m	class:rendering::Mesh
load	rendering/MarkerMesh.cpp	/^    void MarkerMesh::load(glm::vec2 _size, BaseShader& _shader, BaseShader& _shadowMapShader) {$/;"	f	class:rendering::MarkerMesh
load	rendering/Mesh.cpp	/^    void Mesh::load(const char* _path, BaseShader& _shader, BaseShader& _shadowMapShader) {$/;"	f	class:rendering::Mesh
loadOBJ	rendering/Mesh.cpp	/^    bool Mesh::loadOBJ($/;"	f	class:rendering::Mesh
log2	glm/core/_fixes.hpp	53;"	d
lookAtDir	rendering/BaseCamera.hpp	/^        vec3 lookAtDir;$/;"	m	class:rendering::BaseCamera
lowp_float	glm/core/type_float.hpp	/^	typedef lowp_float_t		lowp_float;$/;"	t	namespace:glm
lowp_float_t	glm/core/type_float.hpp	/^	typedef detail::half		lowp_float_t;$/;"	t	namespace:glm
lowp_imat2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<lowp_int>				lowp_imat2;$/;"	t	namespace:glm
lowp_imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<lowp_int>				lowp_imat2x2;$/;"	t	namespace:glm
lowp_imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x3<lowp_int>				lowp_imat2x3;$/;"	t	namespace:glm
lowp_imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x4<lowp_int>				lowp_imat2x4;$/;"	t	namespace:glm
lowp_imat3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<lowp_int>				lowp_imat3;$/;"	t	namespace:glm
lowp_imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x2<lowp_int>				lowp_imat3x2;$/;"	t	namespace:glm
lowp_imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<lowp_int>				lowp_imat3x3;$/;"	t	namespace:glm
lowp_imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x4<lowp_int>				lowp_imat3x4;$/;"	t	namespace:glm
lowp_imat4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<lowp_int>				lowp_imat4;$/;"	t	namespace:glm
lowp_imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x2<lowp_int>				lowp_imat4x2;$/;"	t	namespace:glm
lowp_imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x3<lowp_int>				lowp_imat4x3;$/;"	t	namespace:glm
lowp_imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<lowp_int>				lowp_imat4x4;$/;"	t	namespace:glm
lowp_int	glm/core/type_int.hpp	/^	typedef detail::lowp_int_t				lowp_int;$/;"	t	namespace:glm
lowp_int_t	glm/core/type_int.hpp	/^	typedef signed short			lowp_int_t;$/;"	t	namespace:glm::detail
lowp_ivec1	glm/gtx/vec1.hpp	/^	typedef detail::lowp_ivec1_t			lowp_ivec1;$/;"	t	namespace:glm
lowp_ivec1_t	glm/core/type_vec1.hpp	/^	typedef detail::tvec1<lowp_int>			lowp_ivec1_t;$/;"	t	namespace:glm::detail
lowp_ivec2	glm/core/type_vec2.hpp	/^	typedef detail::tvec2<lowp_int>			lowp_ivec2;$/;"	t	namespace:glm
lowp_ivec3	glm/core/type_vec3.hpp	/^	typedef detail::tvec3<lowp_int>			lowp_ivec3;$/;"	t	namespace:glm
lowp_ivec4	glm/core/type_vec4.hpp	/^	typedef detail::tvec4<lowp_int>			lowp_ivec4;$/;"	t	namespace:glm
lowp_mat2	glm/core/type_mat2x2.hpp	/^	typedef detail::tmat2x2<lowp_float>		lowp_mat2;$/;"	t	namespace:glm
lowp_mat2x2	glm/core/type_mat2x2.hpp	/^	typedef detail::tmat2x2<lowp_float>		lowp_mat2x2;$/;"	t	namespace:glm
lowp_mat2x3	glm/core/type_mat2x3.hpp	/^	typedef detail::tmat2x3<lowp_float>		lowp_mat2x3;$/;"	t	namespace:glm
lowp_mat2x4	glm/core/type_mat2x4.hpp	/^	typedef detail::tmat2x4<lowp_float>		lowp_mat2x4;$/;"	t	namespace:glm
lowp_mat3	glm/core/type_mat3x3.hpp	/^	typedef detail::tmat3x3<lowp_float>		lowp_mat3;$/;"	t	namespace:glm
lowp_mat3x2	glm/core/type_mat3x2.hpp	/^	typedef detail::tmat3x2<lowp_float>		lowp_mat3x2;$/;"	t	namespace:glm
lowp_mat3x3	glm/core/type_mat3x3.hpp	/^	typedef detail::tmat3x3<lowp_float>		lowp_mat3x3;$/;"	t	namespace:glm
lowp_mat3x4	glm/core/type_mat3x4.hpp	/^	typedef detail::tmat3x4<lowp_float>		lowp_mat3x4;$/;"	t	namespace:glm
lowp_mat4	glm/core/type_mat4x4.hpp	/^	typedef detail::tmat4x4<lowp_float>		lowp_mat4;$/;"	t	namespace:glm
lowp_mat4x2	glm/core/type_mat4x2.hpp	/^	typedef detail::tmat4x2<lowp_float>		lowp_mat4x2;$/;"	t	namespace:glm
lowp_mat4x3	glm/core/type_mat4x3.hpp	/^	typedef detail::tmat4x3<lowp_float>		lowp_mat4x3;$/;"	t	namespace:glm
lowp_mat4x4	glm/core/type_mat4x4.hpp	/^	typedef detail::tmat4x4<lowp_float>		lowp_mat4x4;$/;"	t	namespace:glm
lowp_quat	glm/gtc/quaternion.hpp	/^	typedef detail::tquat<lowp_float>		lowp_quat;$/;"	t	namespace:glm
lowp_uint	glm/core/type_int.hpp	/^	typedef detail::lowp_uint_t				lowp_uint;$/;"	t	namespace:glm
lowp_uint_t	glm/core/type_int.hpp	/^	typedef unsigned short			lowp_uint_t;$/;"	t	namespace:glm::detail
lowp_umat2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<lowp_uint>				lowp_umat2;$/;"	t	namespace:glm
lowp_umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<lowp_uint>				lowp_umat2x2;$/;"	t	namespace:glm
lowp_umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x3<lowp_uint>				lowp_umat2x3;$/;"	t	namespace:glm
lowp_umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x4<lowp_uint>				lowp_umat2x4;$/;"	t	namespace:glm
lowp_umat3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<lowp_uint>				lowp_umat3;$/;"	t	namespace:glm
lowp_umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x2<lowp_uint>				lowp_umat3x2;$/;"	t	namespace:glm
lowp_umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<lowp_uint>				lowp_umat3x3;$/;"	t	namespace:glm
lowp_umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x4<lowp_uint>				lowp_umat3x4;$/;"	t	namespace:glm
lowp_umat4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<lowp_uint>				lowp_umat4;$/;"	t	namespace:glm
lowp_umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x2<lowp_uint>				lowp_umat4x2;$/;"	t	namespace:glm
lowp_umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x3<lowp_uint>				lowp_umat4x3;$/;"	t	namespace:glm
lowp_umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<lowp_uint>				lowp_umat4x4;$/;"	t	namespace:glm
lowp_uvec1	glm/gtx/vec1.hpp	/^	typedef detail::lowp_uvec1_t			lowp_uvec1;$/;"	t	namespace:glm
lowp_uvec1_t	glm/core/type_vec1.hpp	/^	typedef detail::tvec1<lowp_uint>		lowp_uvec1_t;$/;"	t	namespace:glm::detail
lowp_uvec2	glm/core/type_vec2.hpp	/^	typedef detail::tvec2<lowp_uint>		lowp_uvec2;$/;"	t	namespace:glm
lowp_uvec3	glm/core/type_vec3.hpp	/^	typedef detail::tvec3<lowp_uint>		lowp_uvec3;$/;"	t	namespace:glm
lowp_uvec4	glm/core/type_vec4.hpp	/^	typedef detail::tvec4<lowp_uint>		lowp_uvec4;$/;"	t	namespace:glm
lowp_vec1	glm/gtx/vec1.hpp	/^	typedef detail::lowp_vec1_t				lowp_vec1;$/;"	t	namespace:glm
lowp_vec1_t	glm/core/type_vec1.hpp	/^	typedef detail::tvec1<lowp_float>		lowp_vec1_t;$/;"	t	namespace:glm::detail
lowp_vec2	glm/core/type_vec2.hpp	/^	typedef detail::tvec2<lowp_float>		lowp_vec2;$/;"	t	namespace:glm
lowp_vec3	glm/core/type_vec3.hpp	/^	typedef detail::tvec3<lowp_float>		lowp_vec3;$/;"	t	namespace:glm
lowp_vec4	glm/core/type_vec4.hpp	/^	typedef detail::tvec4<lowp_float>		lowp_vec4;$/;"	t	namespace:glm
mCamera	tst/MinimalOgre.h	/^    Ogre::Camera* mCamera;$/;"	m	class:MinimalOgre
mInputManager	tst/MinimalOgre.h	/^    OIS::InputManager* mInputManager;$/;"	m	class:MinimalOgre
mKeyboard	tst/MinimalOgre.cpp	/^    OIS::Keyboard* mKeyboard; $/;"	m	class:SimpleFrameListener	file:
mKeyboard	tst/MinimalOgre.h	/^    OIS::Keyboard* mKeyboard;$/;"	m	class:MinimalOgre
mMouse	tst/MinimalOgre.cpp	/^    OIS::Mouse* mMouse; $/;"	m	class:SimpleFrameListener	file:
mMouse	tst/MinimalOgre.h	/^    OIS::Mouse*    mMouse;$/;"	m	class:MinimalOgre
mOverlaySystem	tst/MinimalOgre.h	/^	Ogre::OverlaySystem *mOverlaySystem;$/;"	m	class:MinimalOgre
mPluginsCfg	tst/MinimalOgre.h	/^    Ogre::String mPluginsCfg;$/;"	m	class:MinimalOgre
mResourcesCfg	tst/MinimalOgre.h	/^    Ogre::String mResourcesCfg;$/;"	m	class:MinimalOgre
mRoot	tst/MinimalOgre.h	/^    Ogre::Root *mRoot;$/;"	m	class:MinimalOgre
mSceneMgr	tst/MinimalOgre.h	/^    Ogre::SceneManager* mSceneMgr;$/;"	m	class:MinimalOgre
mWindow	tst/MinimalOgre.h	/^    Ogre::RenderWindow* mWindow;$/;"	m	class:MinimalOgre
m_backgroundImage	tracking/ARDrawingContext.hpp	/^  cv::Mat            m_backgroundImage;$/;"	m	class:ARDrawingContext
m_backgroundTextureId	tracking/ARDrawingContext.hpp	/^  unsigned int       m_backgroundTextureId;$/;"	m	class:ARDrawingContext
m_calibration	tracking/ARDrawingContext.hpp	/^  CameraCalibration  m_calibration;$/;"	m	class:ARDrawingContext
m_calibration	tracking/ARPipeline.hpp	/^    CameraCalibration m_calibration;$/;"	m	class:ARPipeline
m_cubMidSize	tracking/PatternDetector.hpp	/^    cv::Point3f m_cubMidSize;$/;"	m	class:PatternDetector
m_cubeSize	tracking/PatternDetector.hpp	/^    cv::Point3f m_cubeSize;$/;"	m	class:PatternDetector
m_detector	tracking/PatternDetector.hpp	/^    cv::Ptr<cv::FeatureDetector>     m_detector;$/;"	m	class:PatternDetector
m_distortion	tracking/CameraCalibration.hpp	/^    cv::Mat_<float> m_distortion;$/;"	m	class:CameraCalibration
m_extractor	tracking/PatternDetector.hpp	/^    cv::Ptr<cv::DescriptorExtractor> m_extractor;$/;"	m	class:PatternDetector
m_frontHomography	tracking/ARPipeline.hpp	/^    cv::Mat m_frontHomography, m_rightHomography, m_leftHomography, m_mainHomography;$/;"	m	class:ARPipeline
m_frontPattern	tracking/ARPipeline.hpp	/^    Pattern m_frontPattern;$/;"	m	class:ARPipeline
m_grayImg	tracking/PatternDetector.hpp	/^    cv::Mat                   m_grayImg;$/;"	m	class:PatternDetector
m_intrinsic	tracking/CameraCalibration.hpp	/^    cv::Matx33f     m_intrinsic;$/;"	m	class:CameraCalibration
m_isTextureInitialized	tracking/ARDrawingContext.hpp	/^  bool               m_isTextureInitialized;$/;"	m	class:ARDrawingContext
m_knnMatches	tracking/PatternDetector.hpp	/^    std::vector< std::vector<cv::DMatch> > m_knnMatches;$/;"	m	class:PatternDetector
m_leftHomography	tracking/ARPipeline.hpp	/^    cv::Mat m_frontHomography, m_rightHomography, m_leftHomography, m_mainHomography;$/;"	m	class:ARPipeline
m_leftPattern	tracking/ARPipeline.hpp	/^    Pattern m_leftPattern;$/;"	m	class:ARPipeline
m_mainHomography	tracking/ARPipeline.hpp	/^    cv::Mat m_frontHomography, m_rightHomography, m_leftHomography, m_mainHomography;$/;"	m	class:ARPipeline
m_mainPattern	tracking/ARPipeline.hpp	/^    Pattern m_mainPattern;$/;"	m	class:ARPipeline
m_mainPattern	tracking/PatternDetector.hpp	/^    Pattern                          m_mainPattern;$/;"	m	class:PatternDetector
m_matcher	tracking/PatternDetector.hpp	/^    cv::Ptr<cv::DescriptorMatcher>   m_matcher;$/;"	m	class:PatternDetector
m_matches	tracking/PatternDetector.hpp	/^    std::vector<cv::DMatch>   m_matches;$/;"	m	class:PatternDetector
m_patternDetector	tracking/ARPipeline.hpp	/^    PatternDetector m_patternDetector;$/;"	m	class:ARPipeline
m_patternInfo	tracking/ARPipeline.hpp	/^    PatternTrackingInfo m_patternInfo;$/;"	m	class:ARPipeline
m_queryDescriptors	tracking/PatternDetector.hpp	/^    cv::Mat                   m_queryDescriptors;$/;"	m	class:PatternDetector
m_queryKeypoints	tracking/PatternDetector.hpp	/^    std::vector<cv::KeyPoint> m_queryKeypoints;$/;"	m	class:PatternDetector
m_rectifiedFront	tracking/ARPipeline.hpp	/^    cv::Mat m_rectifiedFront, m_rectifiedRight, m_rectifiedLeft, m_rectifiedMain;$/;"	m	class:ARPipeline
m_rectifiedLeft	tracking/ARPipeline.hpp	/^    cv::Mat m_rectifiedFront, m_rectifiedRight, m_rectifiedLeft, m_rectifiedMain;$/;"	m	class:ARPipeline
m_rectifiedMain	tracking/ARPipeline.hpp	/^    cv::Mat m_rectifiedFront, m_rectifiedRight, m_rectifiedLeft, m_rectifiedMain;$/;"	m	class:ARPipeline
m_rectifiedRight	tracking/ARPipeline.hpp	/^    cv::Mat m_rectifiedFront, m_rectifiedRight, m_rectifiedLeft, m_rectifiedMain;$/;"	m	class:ARPipeline
m_refinedHomography	tracking/PatternDetector.hpp	/^    cv::Mat                   m_refinedHomography;$/;"	m	class:PatternDetector
m_rightHomography	tracking/ARPipeline.hpp	/^    cv::Mat m_frontHomography, m_rightHomography, m_leftHomography, m_mainHomography;$/;"	m	class:ARPipeline
m_rightPattern	tracking/ARPipeline.hpp	/^    Pattern m_rightPattern;$/;"	m	class:ARPipeline
m_rotation	tracking/GeometryTypes.hpp	/^  Matrix33 m_rotation;$/;"	m	struct:Transformation
m_roughHomography	tracking/PatternDetector.hpp	/^    cv::Mat                   m_roughHomography;$/;"	m	class:PatternDetector
m_translation	tracking/GeometryTypes.hpp	/^  Vector3  m_translation;$/;"	m	struct:Transformation
m_warpedImg	tracking/PatternDetector.hpp	/^    cv::Mat                   m_warpedImg;$/;"	m	class:PatternDetector
m_windowName	tracking/ARDrawingContext.hpp	/^  std::string        m_windowName;$/;"	m	class:ARDrawingContext
macaca	tst/tst-render.cpp	/^		Mesh macaca;$/;"	m	class:IlluminationWindow	file:
macaca2	tst/tst-render.cpp	/^		Mesh macaca2;$/;"	m	class:IlluminationWindow	file:
main	PhotometricAR/main.cpp	/^int main()$/;"	f
main	glm/core/dummy.cpp	/^int main()$/;"	f
main	tst/irrlicht_render.cpp	/^int main()$/;"	f
main	tst/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tst/tst-render.cpp	/^int main( int argc, char* argv[] )$/;"	f
main	tst/tst-track.cpp	/^int main( int argc, char** argv )$/;"	f
manager	tst/main.cpp	/^    RenderingManager* manager;$/;"	m	class:IlluminationWindow	file:
manager	tst/tst-render.cpp	/^		RenderingManager* manager;$/;"	m	class:IlluminationWindow	file:
markerMesh	tst/main.cpp	/^    MarkerMesh markerMesh;$/;"	m	class:IlluminationWindow	file:
markerShader	tst/main.cpp	/^    BaseShader markerShader;$/;"	m	class:IlluminationWindow	file:
mat	tracking/GeometryTypes.hpp	/^    float mat[3][3];$/;"	m	union:Matrix33::__anon2
mat	tracking/GeometryTypes.hpp	/^    float mat[4][4];$/;"	m	union:Matrix44::__anon1
mat2	glm/core/type.hpp	/^	typedef mat2x2							mat2;$/;"	t	namespace:glm
mat2x2	glm/core/type.hpp	/^	typedef highp_mat2x2		mat2x2;$/;"	t	namespace:glm
mat2x3	glm/core/type.hpp	/^	typedef highp_mat2x3		mat2x3;$/;"	t	namespace:glm
mat2x4	glm/core/type.hpp	/^	typedef highp_mat2x4		mat2x4;$/;"	t	namespace:glm
mat3	glm/core/type.hpp	/^	typedef mat3x3							mat3;$/;"	t	namespace:glm
mat3x2	glm/core/type.hpp	/^	typedef highp_mat3x2		mat3x2;$/;"	t	namespace:glm
mat3x3	glm/core/type.hpp	/^	typedef highp_mat3x3		mat3x3;$/;"	t	namespace:glm
mat3x4	glm/core/type.hpp	/^	typedef highp_mat3x4		mat3x4;$/;"	t	namespace:glm
mat4	glm/core/type.hpp	/^	typedef mat4x4							mat4;$/;"	t	namespace:glm
mat4x2	glm/core/type.hpp	/^	typedef highp_mat4x2		mat4x2;$/;"	t	namespace:glm
mat4x3	glm/core/type.hpp	/^	typedef highp_mat4x3		mat4x3;$/;"	t	namespace:glm
mat4x4	glm/core/type.hpp	/^	typedef highp_mat4x4		mat4x4;$/;"	t	namespace:glm
max	glm/core/_fixes.hpp	33;"	d
maxCromaticity	tracking/ARPipeline.cpp	/^void maxCromaticity( cv::Mat& src, cv::Mat& res)$/;"	f
mediump_float	glm/core/type_float.hpp	/^	typedef mediump_float_t     mediump_float;$/;"	t	namespace:glm
mediump_float_t	glm/core/type_float.hpp	/^	typedef float				mediump_float_t;$/;"	t	namespace:glm
mediump_imat2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<mediump_int>			mediump_imat2;$/;"	t	namespace:glm
mediump_imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<mediump_int>			mediump_imat2x2;$/;"	t	namespace:glm
mediump_imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x3<mediump_int>			mediump_imat2x3;$/;"	t	namespace:glm
mediump_imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x4<mediump_int>			mediump_imat2x4;$/;"	t	namespace:glm
mediump_imat3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<mediump_int>			mediump_imat3;$/;"	t	namespace:glm
mediump_imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x2<mediump_int>			mediump_imat3x2;$/;"	t	namespace:glm
mediump_imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<mediump_int>			mediump_imat3x3;$/;"	t	namespace:glm
mediump_imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x4<mediump_int>			mediump_imat3x4;$/;"	t	namespace:glm
mediump_imat4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<mediump_int>			mediump_imat4;$/;"	t	namespace:glm
mediump_imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x2<mediump_int>			mediump_imat4x2;$/;"	t	namespace:glm
mediump_imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x3<mediump_int>			mediump_imat4x3;$/;"	t	namespace:glm
mediump_imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<mediump_int>			mediump_imat4x4;$/;"	t	namespace:glm
mediump_int	glm/core/type_int.hpp	/^	typedef detail::mediump_int_t			mediump_int;$/;"	t	namespace:glm
mediump_int_t	glm/core/type_int.hpp	/^	typedef signed int				mediump_int_t;$/;"	t	namespace:glm::detail
mediump_ivec1	glm/gtx/vec1.hpp	/^	typedef detail::mediump_ivec1_t			mediump_ivec1;$/;"	t	namespace:glm
mediump_ivec1_t	glm/core/type_vec1.hpp	/^	typedef detail::tvec1<mediump_int>		mediump_ivec1_t;$/;"	t	namespace:glm::detail
mediump_ivec2	glm/core/type_vec2.hpp	/^	typedef detail::tvec2<mediump_int>		mediump_ivec2;$/;"	t	namespace:glm
mediump_ivec3	glm/core/type_vec3.hpp	/^	typedef detail::tvec3<mediump_int>		mediump_ivec3;$/;"	t	namespace:glm
mediump_ivec4	glm/core/type_vec4.hpp	/^	typedef detail::tvec4<mediump_int>		mediump_ivec4;$/;"	t	namespace:glm
mediump_mat2	glm/core/type_mat2x2.hpp	/^	typedef detail::tmat2x2<mediump_float>	mediump_mat2;$/;"	t	namespace:glm
mediump_mat2x2	glm/core/type_mat2x2.hpp	/^	typedef detail::tmat2x2<mediump_float>	mediump_mat2x2;$/;"	t	namespace:glm
mediump_mat2x3	glm/core/type_mat2x3.hpp	/^	typedef detail::tmat2x3<mediump_float>	mediump_mat2x3;$/;"	t	namespace:glm
mediump_mat2x4	glm/core/type_mat2x4.hpp	/^	typedef detail::tmat2x4<mediump_float>	mediump_mat2x4;$/;"	t	namespace:glm
mediump_mat3	glm/core/type_mat3x3.hpp	/^	typedef detail::tmat3x3<mediump_float>	mediump_mat3;$/;"	t	namespace:glm
mediump_mat3x2	glm/core/type_mat3x2.hpp	/^	typedef detail::tmat3x2<mediump_float>	mediump_mat3x2;$/;"	t	namespace:glm
mediump_mat3x3	glm/core/type_mat3x3.hpp	/^	typedef detail::tmat3x3<mediump_float>	mediump_mat3x3;$/;"	t	namespace:glm
mediump_mat3x4	glm/core/type_mat3x4.hpp	/^	typedef detail::tmat3x4<mediump_float>	mediump_mat3x4;$/;"	t	namespace:glm
mediump_mat4	glm/core/type_mat4x4.hpp	/^	typedef detail::tmat4x4<mediump_float>	mediump_mat4;$/;"	t	namespace:glm
mediump_mat4x2	glm/core/type_mat4x2.hpp	/^	typedef detail::tmat4x2<mediump_float>	mediump_mat4x2;$/;"	t	namespace:glm
mediump_mat4x3	glm/core/type_mat4x3.hpp	/^	typedef detail::tmat4x3<mediump_float>	mediump_mat4x3;$/;"	t	namespace:glm
mediump_mat4x4	glm/core/type_mat4x4.hpp	/^	typedef detail::tmat4x4<mediump_float>	mediump_mat4x4;$/;"	t	namespace:glm
mediump_quat	glm/gtc/quaternion.hpp	/^	typedef detail::tquat<mediump_float>	mediump_quat;$/;"	t	namespace:glm
mediump_uint	glm/core/type_int.hpp	/^	typedef detail::mediump_uint_t			mediump_uint;$/;"	t	namespace:glm
mediump_uint_t	glm/core/type_int.hpp	/^	typedef unsigned int			mediump_uint_t;$/;"	t	namespace:glm::detail
mediump_umat2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<mediump_uint>			mediump_umat2;$/;"	t	namespace:glm
mediump_umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x2<mediump_uint>			mediump_umat2x2;$/;"	t	namespace:glm
mediump_umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x3<mediump_uint>			mediump_umat2x3;$/;"	t	namespace:glm
mediump_umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat2x4<mediump_uint>			mediump_umat2x4;$/;"	t	namespace:glm
mediump_umat3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<mediump_uint>			mediump_umat3;$/;"	t	namespace:glm
mediump_umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x2<mediump_uint>			mediump_umat3x2;$/;"	t	namespace:glm
mediump_umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x3<mediump_uint>			mediump_umat3x3;$/;"	t	namespace:glm
mediump_umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat3x4<mediump_uint>			mediump_umat3x4;$/;"	t	namespace:glm
mediump_umat4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<mediump_uint>			mediump_umat4;$/;"	t	namespace:glm
mediump_umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x2<mediump_uint>			mediump_umat4x2;$/;"	t	namespace:glm
mediump_umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x3<mediump_uint>			mediump_umat4x3;$/;"	t	namespace:glm
mediump_umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef detail::tmat4x4<mediump_uint>			mediump_umat4x4;$/;"	t	namespace:glm
mediump_uvec1	glm/gtx/vec1.hpp	/^	typedef detail::mediump_uvec1_t			mediump_uvec1;$/;"	t	namespace:glm
mediump_uvec1_t	glm/core/type_vec1.hpp	/^	typedef detail::tvec1<mediump_uint>		mediump_uvec1_t;$/;"	t	namespace:glm::detail
mediump_uvec2	glm/core/type_vec2.hpp	/^	typedef detail::tvec2<mediump_uint>		mediump_uvec2;$/;"	t	namespace:glm
mediump_uvec3	glm/core/type_vec3.hpp	/^	typedef detail::tvec3<mediump_uint>		mediump_uvec3;$/;"	t	namespace:glm
mediump_uvec4	glm/core/type_vec4.hpp	/^	typedef detail::tvec4<mediump_uint>		mediump_uvec4;$/;"	t	namespace:glm
mediump_vec1	glm/gtx/vec1.hpp	/^	typedef detail::mediump_vec1_t			mediump_vec1;$/;"	t	namespace:glm
mediump_vec1_t	glm/core/type_vec1.hpp	/^	typedef detail::tvec1<mediump_float>	mediump_vec1_t;$/;"	t	namespace:glm::detail
mediump_vec2	glm/core/type_vec2.hpp	/^	typedef detail::tvec2<mediump_float>	mediump_vec2;$/;"	t	namespace:glm
mediump_vec3	glm/core/type_vec3.hpp	/^	typedef detail::tvec3<mediump_float>	mediump_vec3;$/;"	t	namespace:glm
mediump_vec4	glm/core/type_vec4.hpp	/^	typedef detail::tvec4<mediump_float>	mediump_vec4;$/;"	t	namespace:glm
min	glm/core/_fixes.hpp	38;"	d
minCromaticity	tracking/ARPipeline.cpp	/^void minCromaticity( cv::Mat& src, cv::Mat& res)$/;"	f
model	tst/main.cpp	/^    Mesh model;$/;"	m	class:IlluminationWindow	file:
modelMatLoc	rendering/Mesh.hpp	/^        GLuint modelMatLoc;$/;"	m	class:rendering::Mesh
modelMatLoc	rendering/Sprite.hpp	/^        GLuint modelMatLoc;$/;"	m	class:rendering::Sprite
modelMatrix	rendering/Mesh.hpp	/^        mat4 modelMatrix;$/;"	m	class:rendering::Mesh
modelMatrix	rendering/Sprite.hpp	/^        mat4 modelMatrix;$/;"	m	class:rendering::Sprite
mouseMoved	tst/MinimalOgre.cpp	/^    bool mouseMoved(const OIS::MouseEvent& e){ return true; }$/;"	f	class:SimpleMouseListener
mousePressed	tst/MinimalOgre.cpp	/^    bool mousePressed(const OIS::MouseEvent& e, OIS::MouseButtonID id){ return true; }$/;"	f	class:SimpleMouseListener
mouseReleased	tst/MinimalOgre.cpp	/^    bool mouseReleased(const OIS::MouseEvent& e, OIS::MouseButtonID id){ return true; }$/;"	f	class:SimpleMouseListener
nice	glm/core/type_gentype.hpp	/^		nice,$/;"	e	enum:glm::profile
nicest	glm/core/hint.hpp	/^	class nicest {};$/;"	c	namespace:glm
normalAttribute	rendering/Mesh.hpp	/^        GLint normalAttribute;$/;"	m	class:rendering::Mesh
normalBuffer	rendering/Mesh.hpp	/^        GLuint normalBuffer;$/;"	m	class:rendering::Mesh
normalMatLoc	rendering/Mesh.hpp	/^        GLuint normalMatLoc;$/;"	m	class:rendering::Mesh
normals	rendering/Mesh.hpp	/^        vector<vec3> normals;$/;"	m	class:rendering::Mesh
null	glm/core/type_gentype.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::genType::ctor
null	glm/core/type_mat2x2.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tmat2x2::ctor
null	glm/core/type_mat2x3.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tmat2x3::ctor
null	glm/core/type_mat2x4.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tmat2x4::ctor
null	glm/core/type_mat3x2.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tmat3x2::ctor
null	glm/core/type_mat3x3.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tmat3x3::ctor
null	glm/core/type_mat3x4.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tmat3x4::ctor
null	glm/core/type_mat4x2.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tmat4x2::ctor
null	glm/core/type_mat4x3.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tmat4x3::ctor
null	glm/core/type_mat4x4.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tmat4x4::ctor
null	glm/core/type_vec1.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tvec1::ctor
null	glm/core/type_vec2.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tvec2::ctor
null	glm/core/type_vec3.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tvec3::ctor
null	glm/core/type_vec4.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tvec4::ctor
null	glm/gtc/half_float.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tvec2::ctor
null	glm/gtc/half_float.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tvec3::ctor
null	glm/gtc/half_float.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tvec4::ctor
null	glm/gtc/quaternion.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::tquat::ctor
objects	rendering/RenderingManager.hpp	/^        std::vector<RenderableObject*> objects;$/;"	m	class:rendering::RenderingManager
operator ()	glm/core/_swizzle.hpp	/^		V operator ()()  const { return V(this->elem(E0), this->elem(E1)); }$/;"	f	struct:glm::detail::_swizzle_base1
operator ()	glm/core/_swizzle.hpp	/^		V operator ()()  const { return V(this->elem(E0), this->elem(E1), this->elem(E2)); }$/;"	f	struct:glm::detail::_swizzle_base1
operator ()	glm/core/_swizzle.hpp	/^		V operator ()()  const { return V(this->elem(E0), this->elem(E1), this->elem(E2), this->elem(E3)); }$/;"	f	struct:glm::detail::_swizzle_base1
operator *=	glm/core/_swizzle.hpp	/^		void operator *= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2
operator +=	glm/core/_swizzle.hpp	/^		void operator += (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2
operator -	tracking/GeometryTypes.cpp	/^Vector3 Vector3::operator-() const$/;"	f	class:Vector3
operator -=	glm/core/_swizzle.hpp	/^		void operator -= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2
operator /=	glm/core/_swizzle.hpp	/^		void operator \/= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2
operator =	glm/core/_swizzle.hpp	/^		_swizzle_base2& operator= (Stub const &) {}$/;"	f	struct:glm::detail::_swizzle_base2
operator =	glm/core/_swizzle.hpp	/^		_swizzle_base2& operator= (const ValueType& t)$/;"	f	struct:glm::detail::_swizzle_base2
operator =	glm/core/_swizzle.hpp	/^		_swizzle_base2& operator= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2
operator VecType	glm/core/_swizzle.hpp	/^		operator VecType () const { return (*this)(); }$/;"	f	struct:glm::detail::swizzle
operator []	glm/core/_swizzle.hpp	/^		value_type  operator[]  (size_t i) const$/;"	f	struct:glm::detail::_swizzle_base2
operator []	glm/core/_swizzle.hpp	/^		value_type& operator[]  (size_t i)$/;"	f	struct:glm::detail::_swizzle_base2
p	glm/core/type_vec3.hpp	/^			struct{value_type s, t, p;};$/;"	m	struct:glm::detail::tvec3::__anon3::__anon5
p	glm/core/type_vec3.hpp	/^		union {value_type z, b, p;};$/;"	m	union:glm::detail::tvec3::__anon9
p	glm/core/type_vec4.hpp	/^			struct{value_type s, t, p, q;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon12
p	glm/core/type_vec4.hpp	/^		union {value_type z, b, p;};$/;"	m	union:glm::detail::tvec4::__anon16
param_type	glm/core/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const & param_type;$/;"	t	struct:glm::detail::genType
patternImg	tst/main.cpp	/^    cv::Mat patternImg;$/;"	m	class:IlluminationWindow	file:
patternImg	tst/tst-render.cpp	/^		cv::Mat patternImg;$/;"	m	class:IlluminationWindow	file:
patternPose	tracking/ARDrawingContext.hpp	/^  Transformation      patternPose;$/;"	m	class:ARDrawingContext
patternPose	tst/main.cpp	/^    Transformation patternPose;$/;"	m	class:IlluminationWindow	file:
pipeline	tst/main.cpp	/^    ARPipeline* pipeline;$/;"	m	class:IlluminationWindow	file:
pointer	glm/core/type_gentype.hpp	/^		typedef TYPE<VALTYPE> * pointer;$/;"	t	struct:glm::detail::genType
pointer_const	glm/core/type_gentype.hpp	/^		typedef TYPE<VALTYPE> * const pointer_const;$/;"	t	struct:glm::detail::genType
points2d	tracking/Pattern.hpp	/^  std::vector<cv::Point2f>  points2d;$/;"	m	struct:Pattern
points2d	tracking/Pattern.hpp	/^  std::vector<cv::Point2f>  points2d;$/;"	m	struct:PatternTrackingInfo
points3d	tracking/Pattern.hpp	/^  std::vector<cv::Point3f>  points3d;$/;"	m	struct:Pattern
pose3d	tracking/Pattern.hpp	/^  Transformation            pose3d;$/;"	m	struct:PatternTrackingInfo
position	rendering/BaseCamera.hpp	/^        vec3 position;$/;"	m	class:rendering::BaseCamera
printCompilationError	rendering/BaseShader.cpp	/^	void BaseShader::printCompilationError( GLuint _obj )$/;"	f	class:rendering::BaseShader
processFrame	tracking/ARPipeline.cpp	/^bool ARPipeline::processFrame(cv::Mat& inputFrame)$/;"	f	class:ARPipeline
profile	glm/core/type_gentype.hpp	/^	enum profile$/;"	g	namespace:glm
programId	rendering/BaseShader.hpp	/^        GLuint programId;$/;"	m	class:rendering::BaseShader
programId	rendering/Mesh.hpp	/^        GLuint programId;$/;"	m	class:rendering::Mesh
programId	rendering/Sprite.hpp	/^        GLuint programId;$/;"	m	class:rendering::Sprite
projection	tst/main.cpp	/^    mat4 projection;$/;"	m	class:IlluminationWindow	file:
projection	tst/tst-render.cpp	/^		mat4 projection;$/;"	m	class:IlluminationWindow	file:
projectionMatLoc	rendering/Mesh.hpp	/^        GLuint projectionMatLoc;$/;"	m	class:rendering::Mesh
projectionMatLoc	rendering/Sprite.hpp	/^        GLuint projectionMatLoc;$/;"	m	class:rendering::Sprite
projectionMatrix	rendering/BaseCamera.hpp	/^        mat4 projectionMatrix;$/;"	m	class:rendering::BaseCamera
q	glm/core/type_vec4.hpp	/^			struct{value_type s, t, p, q;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon12
q	glm/core/type_vec4.hpp	/^		union {value_type w, a, q;};$/;"	m	union:glm::detail::tvec4::__anon17
quat	glm/gtc/quaternion.hpp	/^	typedef detail::tquat<float> quat;$/;"	t	namespace:glm
qword	glm/gtx/raw_data.hpp	/^	typedef uint64		qword;$/;"	t	namespace:glm
r	glm/core/type_vec1.hpp	/^			union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec1::__anon24
r	glm/core/type_vec2.hpp	/^			struct{value_type r, g;};$/;"	m	struct:glm::detail::tvec2::__anon18::__anon19
r	glm/core/type_vec2.hpp	/^		union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec2::__anon22
r	glm/core/type_vec3.hpp	/^			struct{value_type r, g, b;};$/;"	m	struct:glm::detail::tvec3::__anon3::__anon4
r	glm/core/type_vec3.hpp	/^		union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec3::__anon7
r	glm/core/type_vec4.hpp	/^			struct{value_type r, g, b, a;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon11
r	glm/core/type_vec4.hpp	/^		union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec4::__anon14
r	tracking/GeometryTypes.cpp	/^Matrix33& Transformation::r()$/;"	f	class:Transformation
r	tracking/GeometryTypes.cpp	/^const Matrix33& Transformation::r() const$/;"	f	class:Transformation
readFile	rendering/BaseShader.cpp	/^	char* BaseShader::readFile( const char* _filename )$/;"	f	class:rendering::BaseShader
reference	glm/core/type_gentype.hpp	/^		typedef TYPE<VALTYPE> & reference;$/;"	t	struct:glm::detail::genType
refineMatchesWithHomography	tracking/PatternDetector.cpp	/^bool PatternDetector::refineMatchesWithHomography$/;"	f	class:PatternDetector
render	rendering/RenderingManager.cpp	/^    void RenderingManager::render() {$/;"	f	class:rendering::RenderingManager
render	rendering/RenderingWindow.cpp	/^	void RenderingWindow::render()$/;"	f	class:rendering::RenderingWindow
render	tst/main.cpp	/^    virtual void render() {$/;"	f	class:IlluminationWindow
render	tst/tst-render.cpp	/^		virtual void render()$/;"	f	class:IlluminationWindow
renderShadowMap	rendering/RenderingManager.cpp	/^    void RenderingManager::renderShadowMap() {$/;"	f	class:rendering::RenderingManager
renderWithShadows	rendering/RenderingManager.cpp	/^    void RenderingManager::renderWithShadows(bool _shadows) {$/;"	f	class:rendering::RenderingManager
renderWrapper	rendering/RenderingWindow.cpp	/^	void RenderingWindow::renderWrapper()$/;"	f	class:rendering::RenderingWindow
rendering	rendering/BaseCamera.cpp	/^namespace rendering{$/;"	n	file:
rendering	rendering/BaseCamera.hpp	/^namespace rendering {$/;"	n
rendering	rendering/BaseShader.cpp	/^namespace rendering$/;"	n	file:
rendering	rendering/BaseShader.hpp	/^namespace rendering {$/;"	n
rendering	rendering/MarkerMesh.cpp	/^namespace rendering {$/;"	n	file:
rendering	rendering/MarkerMesh.hpp	/^namespace rendering {$/;"	n
rendering	rendering/Mesh.cpp	/^namespace rendering {$/;"	n	file:
rendering	rendering/Mesh.hpp	/^namespace rendering {$/;"	n
rendering	rendering/RenderableObject.cpp	/^namespace rendering$/;"	n	file:
rendering	rendering/RenderableObject.hpp	/^namespace rendering {$/;"	n
rendering	rendering/RenderingManager.cpp	/^namespace rendering {$/;"	n	file:
rendering	rendering/RenderingManager.hpp	/^namespace rendering {$/;"	n
rendering	rendering/RenderingWindow.cpp	/^namespace rendering$/;"	n	file:
rendering	rendering/RenderingWindow.hpp	/^namespace rendering$/;"	n
rendering	rendering/Sprite.cpp	/^namespace rendering {$/;"	n	file:
rendering	rendering/Sprite.hpp	/^namespace rendering {$/;"	n
reshape	rendering/RenderingWindow.cpp	/^	void RenderingWindow::reshape( int _width, int _height )$/;"	f	class:rendering::RenderingWindow
reshapeWrapper	rendering/RenderingWindow.cpp	/^	void RenderingWindow::reshapeWrapper( int _width, int _height )$/;"	f	class:rendering::RenderingWindow
rightPatternImg	tst/main.cpp	/^    cv::Mat rightPatternImg;$/;"	m	class:IlluminationWindow	file:
rotate	rendering/BaseCamera.cpp	/^	void BaseCamera::rotate( float angle, vec3 axis )$/;"	f	class:rendering::BaseCamera
row_type	glm/core/type_mat2x2.hpp	/^		typedef tvec2<T> row_type;$/;"	t	struct:glm::detail::tmat2x2
row_type	glm/core/type_mat2x3.hpp	/^		typedef tvec2<T> row_type;$/;"	t	struct:glm::detail::tmat2x3
row_type	glm/core/type_mat2x4.hpp	/^		typedef tvec2<T> row_type;$/;"	t	struct:glm::detail::tmat2x4
row_type	glm/core/type_mat3x2.hpp	/^		typedef tvec3<T> row_type;$/;"	t	struct:glm::detail::tmat3x2
row_type	glm/core/type_mat3x3.hpp	/^		typedef tvec3<T> row_type;$/;"	t	struct:glm::detail::tmat3x3
row_type	glm/core/type_mat3x4.hpp	/^		typedef tvec3<T> row_type;$/;"	t	struct:glm::detail::tmat3x4
row_type	glm/core/type_mat4x2.hpp	/^		typedef tvec4<T> row_type;$/;"	t	struct:glm::detail::tmat4x2
row_type	glm/core/type_mat4x3.hpp	/^		typedef tvec4<T> row_type;$/;"	t	struct:glm::detail::tmat4x3
row_type	glm/core/type_mat4x4.hpp	/^		typedef tvec4<T> row_type;$/;"	t	struct:glm::detail::tmat4x4
s	glm/core/type_vec1.hpp	/^			union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec1::__anon24
s	glm/core/type_vec2.hpp	/^			struct{value_type s, t;};$/;"	m	struct:glm::detail::tvec2::__anon18::__anon20
s	glm/core/type_vec2.hpp	/^		union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec2::__anon22
s	glm/core/type_vec3.hpp	/^			struct{value_type s, t, p;};$/;"	m	struct:glm::detail::tvec3::__anon3::__anon5
s	glm/core/type_vec3.hpp	/^		union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec3::__anon7
s	glm/core/type_vec4.hpp	/^			struct{value_type s, t, p, q;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon12
s	glm/core/type_vec4.hpp	/^		union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec4::__anon14
sFront	tracking/ARPipeline.hpp	/^    cv::Mat sFront, sRight, sLeft, sMain;$/;"	m	class:ARPipeline
sLeft	tracking/ARPipeline.hpp	/^    cv::Mat sFront, sRight, sLeft, sMain;$/;"	m	class:ARPipeline
sMain	tracking/ARPipeline.hpp	/^    cv::Mat sFront, sRight, sLeft, sMain;$/;"	m	class:ARPipeline
sRight	tracking/ARPipeline.hpp	/^    cv::Mat sFront, sRight, sLeft, sMain;$/;"	m	class:ARPipeline
saturate	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER T saturate(T x){return clamp(x, T(0), T(1));}														\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
saturate	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec2<T> saturate(const detail::tvec2<T>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
saturate	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec3<T> saturate(const detail::tvec3<T>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
saturate	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER detail::tvec4<T> saturate(const detail::tvec4<T>& x){return clamp(x, T(0), T(1));}					\/\/!< \\brief Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility)$/;"	f	namespace:glm
setCustomViewMatrix	rendering/BaseCamera.cpp	/^	void BaseCamera::setCustomViewMatrix( mat4 _view )$/;"	f	class:rendering::BaseCamera
setLightColor	rendering/RenderingManager.cpp	/^    void RenderingManager::setLightColor(glm::vec3 _color) {$/;"	f	class:rendering::RenderingManager
setLightDirection	rendering/RenderingManager.cpp	/^    void RenderingManager::setLightDirection(glm::vec3 _direction) {$/;"	f	class:rendering::RenderingManager
setOrthogonalProjection	rendering/BaseCamera.cpp	/^	void BaseCamera::setOrthogonalProjection($/;"	f	class:rendering::BaseCamera
setPerspectiveProjection	rendering/BaseCamera.cpp	/^	void BaseCamera::setPerspectiveProjection($/;"	f	class:rendering::BaseCamera
setProjectionMatrix	rendering/BaseCamera.cpp	/^	void BaseCamera::setProjectionMatrix( mat4 _proj )$/;"	f	class:rendering::BaseCamera
shader	rendering/RenderingWindow.hpp	/^			BaseShader shader;$/;"	m	class:rendering::RenderingWindow
shader2	tst/main.cpp	/^    BaseShader shader2;$/;"	m	class:IlluminationWindow	file:
shader2	tst/tst-render.cpp	/^		BaseShader shader2;$/;"	m	class:IlluminationWindow	file:
shadowBufferName	rendering/RenderingManager.hpp	/^        GLuint shadowBufferName;$/;"	m	class:rendering::RenderingManager
shadowMapLoc	rendering/Mesh.hpp	/^        GLuint shadowMapLoc;$/;"	m	class:rendering::Mesh
shadowMapProgram	rendering/Mesh.hpp	/^        GLuint shadowMapProgram;$/;"	m	class:rendering::Mesh
shadowMapShader	tst/main.cpp	/^    BaseShader shadowMapShader;$/;"	m	class:IlluminationWindow	file:
shadowMapSize	rendering/RenderingManager.hpp	/^        glm::vec2 shadowMapSize;$/;"	m	class:rendering::RenderingManager
shadowMapTexId	rendering/Mesh.hpp	/^        GLuint shadowMapTexId;$/;"	m	class:rendering::Mesh
showAndSave	tracking/DebugHelpers.hpp	/^    inline void showAndSave(std::string name, const cv::Mat& m)$/;"	f	namespace:cv
simd	glm/core/type_gentype.hpp	/^		simd$/;"	e	enum:glm::profile
simdMat4	glm/gtx/simd_mat4.hpp	/^	typedef detail::fmat4x4SIMD simdMat4;$/;"	t	namespace:glm
simdVec4	glm/gtx/simd_vec4.hpp	/^	typedef glm::detail::fvec4SIMD simdVec4;$/;"	t	namespace:glm
sint	glm/gtx/integer.hpp	/^	typedef signed int					sint;$/;"	t	namespace:glm
sint64	glm/core/_detail.hpp	/^	__extension__ typedef signed long long		sint64;$/;"	t	namespace:glm::detail
sint64	glm/core/_detail.hpp	/^	typedef Int64								sint64;$/;"	t	namespace:glm::detail
sint64	glm/core/_detail.hpp	/^	typedef int64_t								sint64;$/;"	t	namespace:glm::detail
sint64	glm/core/_detail.hpp	/^	typedef signed __int64						sint64;$/;"	t	namespace:glm::detail
sint64	glm/core/_detail.hpp	/^	typedef signed long	long					sint64;$/;"	t	namespace:glm::detail
size	rendering/MarkerMesh.hpp	/^        glm::vec2 size;$/;"	m	class:rendering::MarkerMesh
size	tracking/Pattern.hpp	/^  cv::Size                  size;$/;"	m	struct:Pattern
size2	glm/gtx/std_based_type.hpp	/^	typedef detail::tvec2<std::size_t>		size2;$/;"	t	namespace:glm
size2_t	glm/gtx/std_based_type.hpp	/^	typedef detail::tvec2<std::size_t>		size2_t;$/;"	t	namespace:glm
size3	glm/gtx/std_based_type.hpp	/^	typedef detail::tvec3<std::size_t>		size3;$/;"	t	namespace:glm
size3_t	glm/gtx/std_based_type.hpp	/^	typedef detail::tvec3<std::size_t>		size3_t;$/;"	t	namespace:glm
size4	glm/gtx/std_based_type.hpp	/^	typedef detail::tvec4<std::size_t>		size4;$/;"	t	namespace:glm
size4_t	glm/gtx/std_based_type.hpp	/^	typedef detail::tvec4<std::size_t>		size4_t;$/;"	t	namespace:glm
sizeType	glm/core/type_size.hpp	/^	typedef int sizeType;$/;"	t	namespace:glm::detail
size_type	glm/core/type_gentype.hpp	/^		typedef sizeType size_type;$/;"	t	struct:glm::detail::genType
size_type	glm/core/type_mat2x2.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tmat2x2
size_type	glm/core/type_mat2x3.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tmat2x3
size_type	glm/core/type_mat2x4.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tmat2x4
size_type	glm/core/type_mat3x2.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tmat3x2
size_type	glm/core/type_mat3x3.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tmat3x3
size_type	glm/core/type_mat3x4.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tmat3x4
size_type	glm/core/type_mat4x2.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tmat4x2
size_type	glm/core/type_mat4x3.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tmat4x3
size_type	glm/core/type_mat4x4.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tmat4x4
size_type	glm/core/type_vec1.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tvec1
size_type	glm/core/type_vec2.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tvec2
size_type	glm/core/type_vec3.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tvec3
size_type	glm/core/type_vec4.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tvec4
size_type	glm/gtc/half_float.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tvec2
size_type	glm/gtc/half_float.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tvec3
size_type	glm/gtc/half_float.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tvec4
size_type	glm/gtc/quaternion.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:glm::detail::tquat
slerp	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER T slerp(detail::tquat<T> const & x, detail::tquat<T> const & y, T const & a){return mix(x, y, a);} \/\/!< \\brief Returns the slurp interpolation between two quaternions.$/;"	f	namespace:glm
small_rate	tracking/ARPipeline.hpp	/^    float small_rate;$/;"	m	class:ARPipeline
sprite	tst/main.cpp	/^    Sprite* sprite;$/;"	m	class:IlluminationWindow	file:
sprite	tst/tst-render.cpp	/^		Sprite* sprite;$/;"	m	class:IlluminationWindow	file:
spriteShader	tst/main.cpp	/^    BaseShader spriteShader;$/;"	m	class:IlluminationWindow	file:
spriteShader	tst/tst-render.cpp	/^		BaseShader spriteShader;$/;"	m	class:IlluminationWindow	file:
start	rendering/RenderingWindow.cpp	/^	void RenderingWindow::start( int argc, char* argv[] )$/;"	f	class:rendering::RenderingWindow
start	tst/main.cpp	/^    virtual void start(int argc, char* argv[]) {$/;"	f	class:IlluminationWindow
start	tst/tst-render.cpp	/^		virtual void start( int argc, char* argv[]) $/;"	f	class:IlluminationWindow
static_swizzle1_const	glm/gtc/swizzle.hpp	94;"	d
static_swizzle1_ref	glm/gtc/swizzle.hpp	99;"	d
static_swizzle2_const	glm/gtc/swizzle.hpp	156;"	d
static_swizzle2_ref	glm/gtc/swizzle.hpp	280;"	d
static_swizzle3_const	glm/gtc/swizzle.hpp	161;"	d
static_swizzle3_ref	glm/gtc/swizzle.hpp	285;"	d
static_swizzle4_const	glm/gtc/swizzle.hpp	166;"	d
static_swizzle4_ref	glm/gtc/swizzle.hpp	290;"	d
swizzle	glm/core/_swizzle.hpp	/^	struct swizzle : public _swizzle_base2<ValueType,VecType,N,E0,E1,E2,E3,(E0==E1||E0==E2||E0==E3||E1==E2||E1==E3||E2==E3)>$/;"	s	namespace:glm::detail
t	glm/core/type_vec2.hpp	/^			struct{value_type s, t;};$/;"	m	struct:glm::detail::tvec2::__anon18::__anon20
t	glm/core/type_vec2.hpp	/^		union {value_type y, g, t;};$/;"	m	union:glm::detail::tvec2::__anon23
t	glm/core/type_vec3.hpp	/^			struct{value_type s, t, p;};$/;"	m	struct:glm::detail::tvec3::__anon3::__anon5
t	glm/core/type_vec3.hpp	/^		union {value_type y, g, t;};$/;"	m	union:glm::detail::tvec3::__anon8
t	glm/core/type_vec4.hpp	/^			struct{value_type s, t, p, q;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon12
t	glm/core/type_vec4.hpp	/^		union {value_type y, g, t;};$/;"	m	union:glm::detail::tvec4::__anon15
t	tracking/GeometryTypes.cpp	/^Vector3&  Transformation::t()$/;"	f	class:Transformation
t	tracking/GeometryTypes.cpp	/^const Vector3&  Transformation::t() const$/;"	f	class:Transformation
texCoordBuffer	rendering/Sprite.hpp	/^        GLuint texCoordBuffer;$/;"	m	class:rendering::Sprite
texId	rendering/Sprite.hpp	/^        GLuint texId;$/;"	m	class:rendering::Sprite
texLoc	rendering/Sprite.hpp	/^        GLuint texLoc;$/;"	m	class:rendering::Sprite
tmat2x2	glm/core/type_mat2x2.hpp	/^	struct tmat2x2$/;"	s	namespace:glm::detail
tmat2x3	glm/core/type_mat2x3.hpp	/^	struct tmat2x3$/;"	s	namespace:glm::detail
tmat2x4	glm/core/type_mat2x4.hpp	/^	struct tmat2x4$/;"	s	namespace:glm::detail
tmat3x2	glm/core/type_mat3x2.hpp	/^	struct tmat3x2$/;"	s	namespace:glm::detail
tmat3x3	glm/core/type_mat3x3.hpp	/^	struct tmat3x3$/;"	s	namespace:glm::detail
tmat3x4	glm/core/type_mat3x4.hpp	/^	struct tmat3x4$/;"	s	namespace:glm::detail
tmat4x2	glm/core/type_mat4x2.hpp	/^	struct tmat4x2$/;"	s	namespace:glm::detail
tmat4x3	glm/core/type_mat4x3.hpp	/^	struct tmat4x3$/;"	s	namespace:glm::detail
tmat4x4	glm/core/type_mat4x4.hpp	/^	struct tmat4x4$/;"	s	namespace:glm::detail
toFloat	glm/core/type_half.hpp	/^		GLM_FUNC_DECL float toFloat() const{return toFloat32(data);}$/;"	f	class:glm::detail::half
toMat3	glm/gtx/quaternion.hpp	/^	detail::tmat3x3<valType> toMat3($/;"	f	namespace:glm
toMat4	glm/gtx/quaternion.hpp	/^	detail::tmat4x4<valType> toMat4($/;"	f	namespace:glm
toQuat	glm/gtx/quaternion.hpp	/^	detail::tquat<valType> toQuat($/;"	f	namespace:glm
tquat	glm/gtc/quaternion.hpp	/^	struct tquat\/\/ : public genType<T, tquat>$/;"	s	namespace:glm::detail
tracker	tst/tst-render.cpp	/^		Tracker * tracker;$/;"	m	class:IlluminationWindow	file:
train	tracking/PatternDetector.cpp	/^void PatternDetector::train(const Pattern& pattern)$/;"	f	class:PatternDetector
translate	rendering/BaseCamera.cpp	/^	void BaseCamera::translate( vec3 _trans)$/;"	f	class:rendering::BaseCamera
transpose_type	glm/core/type_mat2x2.hpp	/^		typedef tmat2x2<T> transpose_type;$/;"	t	struct:glm::detail::tmat2x2
transpose_type	glm/core/type_mat2x3.hpp	/^		typedef tmat3x2<T> transpose_type;$/;"	t	struct:glm::detail::tmat2x3
transpose_type	glm/core/type_mat2x4.hpp	/^		typedef tmat4x2<T> transpose_type;$/;"	t	struct:glm::detail::tmat2x4
transpose_type	glm/core/type_mat3x2.hpp	/^		typedef tmat2x3<T> transpose_type;$/;"	t	struct:glm::detail::tmat3x2
transpose_type	glm/core/type_mat3x3.hpp	/^		typedef tmat3x3<T> transpose_type;$/;"	t	struct:glm::detail::tmat3x3
transpose_type	glm/core/type_mat3x4.hpp	/^		typedef tmat4x3<T> transpose_type;$/;"	t	struct:glm::detail::tmat3x4
transpose_type	glm/core/type_mat4x2.hpp	/^		typedef tmat2x4<T> transpose_type;$/;"	t	struct:glm::detail::tmat4x2
transpose_type	glm/core/type_mat4x3.hpp	/^		typedef tmat3x4<T> transpose_type;$/;"	t	struct:glm::detail::tmat4x3
transpose_type	glm/core/type_mat4x4.hpp	/^		typedef tmat4x4<T> transpose_type;$/;"	t	struct:glm::detail::tmat4x4
tref1	glm/core/type_vec1.hpp	/^	struct tref1$/;"	s	namespace:glm::detail
tref2	glm/core/type_vec2.hpp	/^	struct tref2$/;"	s	namespace:glm::detail
tref3	glm/core/type_vec3.hpp	/^	struct tref3$/;"	s	namespace:glm::detail
tref4	glm/core/type_vec4.hpp	/^	struct tref4$/;"	s	namespace:glm::detail
tvec1	glm/core/type_vec1.hpp	/^	struct tvec1$/;"	s	namespace:glm::detail
tvec2	glm/core/type_vec2.hpp	/^		GLM_FUNC_DECL tvec2(const glm::detail::swizzle<2,T,tvec2<T>,E0,E1,-1,-2>& that)$/;"	f	struct:glm::detail::tvec2
tvec2	glm/core/type_vec2.hpp	/^	struct tvec2$/;"	s	namespace:glm::detail
tvec2	glm/gtc/half_float.hpp	/^	struct tvec2<half>$/;"	s	namespace:glm::detail
tvec3	glm/core/type_vec3.hpp	/^		GLM_FUNC_DECL tvec3(T const & s, glm::detail::swizzle<2, T, tvec2<T>, E0, E1, -1, -2> const & v)$/;"	f	struct:glm::detail::tvec3
tvec3	glm/core/type_vec3.hpp	/^		GLM_FUNC_DECL tvec3(glm::detail::swizzle<2, T, tvec2<T>, E0, E1, -1, -2> const & v, T const & s)$/;"	f	struct:glm::detail::tvec3
tvec3	glm/core/type_vec3.hpp	/^		GLM_FUNC_DECL tvec3(glm::detail::swizzle<3, T, tvec3<T>, E0, E1, E2, -1> const & that)$/;"	f	struct:glm::detail::tvec3
tvec3	glm/core/type_vec3.hpp	/^	struct tvec3$/;"	s	namespace:glm::detail
tvec3	glm/gtc/half_float.hpp	/^	struct tvec3<half>$/;"	s	namespace:glm::detail
tvec4	glm/core/type_vec4.hpp	/^		GLM_FUNC_DECL tvec4(T const & x, T const & y, glm::detail::swizzle<2, T, tvec2<T>, E0, E1, -1, -2> const & v)$/;"	f	struct:glm::detail::tvec4
tvec4	glm/core/type_vec4.hpp	/^		GLM_FUNC_DECL tvec4(T const & x, glm::detail::swizzle<2, T, tvec2<T>, E0, E1, -1, -2> const & v, T const & w)$/;"	f	struct:glm::detail::tvec4
tvec4	glm/core/type_vec4.hpp	/^		GLM_FUNC_DECL tvec4(T const & x, glm::detail::swizzle<3, T, tvec3<T>, E0, E1, E2, -1> const & v)$/;"	f	struct:glm::detail::tvec4
tvec4	glm/core/type_vec4.hpp	/^		GLM_FUNC_DECL tvec4(glm::detail::swizzle<2, T, tvec2<T>, E0, E1, -1, -2> const & v, T const & z, T const & w)$/;"	f	struct:glm::detail::tvec4
tvec4	glm/core/type_vec4.hpp	/^		GLM_FUNC_DECL tvec4(glm::detail::swizzle<2, T, tvec2<T>, E0, E1, -1, -2> const & v, glm::detail::swizzle<2, T, tvec2<T>, F0, F1, -1, -2> const & u)$/;"	f	struct:glm::detail::tvec4
tvec4	glm/core/type_vec4.hpp	/^		GLM_FUNC_DECL tvec4(glm::detail::swizzle<3, T, tvec3<T>, E0, E1, E2, -1> const & v, T const & w)$/;"	f	struct:glm::detail::tvec4
tvec4	glm/core/type_vec4.hpp	/^		GLM_FUNC_DECL tvec4(glm::detail::swizzle<4, T, tvec4<T>, E0, E1, E2, E3> const & that)$/;"	f	struct:glm::detail::tvec4
tvec4	glm/core/type_vec4.hpp	/^	struct tvec4$/;"	s	namespace:glm::detail
tvec4	glm/gtc/half_float.hpp	/^	struct tvec4<half>$/;"	s	namespace:glm::detail
type	glm/core/_detail.hpp	/^	struct type$/;"	s	namespace:glm::detail
type	glm/core/type_gentype.hpp	/^		typedef TYPE<VALTYPE> type;$/;"	t	struct:glm::detail::genType
type	glm/core/type_mat2x2.hpp	/^		typedef tmat2x2<T> type;$/;"	t	struct:glm::detail::tmat2x2
type	glm/core/type_mat2x3.hpp	/^		typedef tmat2x3<T> type;$/;"	t	struct:glm::detail::tmat2x3
type	glm/core/type_mat2x4.hpp	/^		typedef tmat2x4<T> type;$/;"	t	struct:glm::detail::tmat2x4
type	glm/core/type_mat3x2.hpp	/^		typedef tmat3x2<T> type;$/;"	t	struct:glm::detail::tmat3x2
type	glm/core/type_mat3x3.hpp	/^		typedef tmat3x3<T> type;$/;"	t	struct:glm::detail::tmat3x3
type	glm/core/type_mat3x4.hpp	/^		typedef tmat3x4<T> type;$/;"	t	struct:glm::detail::tmat3x4
type	glm/core/type_mat4x2.hpp	/^		typedef tmat4x2<T> type;$/;"	t	struct:glm::detail::tmat4x2
type	glm/core/type_mat4x3.hpp	/^		typedef tmat4x3<T> type;$/;"	t	struct:glm::detail::tmat4x3
type	glm/core/type_mat4x4.hpp	/^		typedef tmat4x4<T> type;$/;"	t	struct:glm::detail::tmat4x4
type	glm/core/type_vec1.hpp	/^		typedef tvec1<T> type;$/;"	t	struct:glm::detail::tvec1
type	glm/core/type_vec2.hpp	/^		typedef tvec2<T> type;$/;"	t	struct:glm::detail::tvec2
type	glm/core/type_vec3.hpp	/^		typedef tvec3<T> type;$/;"	t	struct:glm::detail::tvec3
type	glm/core/type_vec4.hpp	/^		typedef tvec4<T> type;$/;"	t	struct:glm::detail::tvec4
type	glm/gtc/half_float.hpp	/^		typedef tvec2<half> type;$/;"	t	struct:glm::detail::tvec2
type	glm/gtc/half_float.hpp	/^		typedef tvec3<half> type;$/;"	t	struct:glm::detail::tvec3
type	glm/gtc/half_float.hpp	/^		typedef tvec4<half> type;$/;"	t	struct:glm::detail::tvec4
type_enum	glm/core/_detail.hpp	/^		enum type_enum$/;"	g	struct:glm::detail::type
u16	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm
u16vec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<u16> u16vec1;$/;"	t	namespace:glm
u16vec1	glm/gtx/number_precision.hpp	/^	typedef u16			u16vec1;    \/\/!< \\brief 16bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u16vec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<u16> u16vec2;$/;"	t	namespace:glm
u16vec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<u16> u16vec3;$/;"	t	namespace:glm
u16vec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<u16> u16vec4;$/;"	t	namespace:glm
u32	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm
u32vec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<u32> u32vec1;$/;"	t	namespace:glm
u32vec1	glm/gtx/number_precision.hpp	/^	typedef u32			u32vec1;    \/\/!< \\brief 32bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u32vec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<u32> u32vec2;$/;"	t	namespace:glm
u32vec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<u32> u32vec3;$/;"	t	namespace:glm
u32vec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<u32> u32vec4;$/;"	t	namespace:glm
u64	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm
u64vec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<u64> u64vec1;$/;"	t	namespace:glm
u64vec1	glm/gtx/number_precision.hpp	/^	typedef u64			u64vec1;    \/\/!< \\brief 64bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u64vec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<u64> u64vec2;$/;"	t	namespace:glm
u64vec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<u64> u64vec3;$/;"	t	namespace:glm
u64vec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<u64> u64vec4;$/;"	t	namespace:glm
u8	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm
u8vec1	glm/gtc/type_precision.hpp	/^	typedef detail::tvec1<u8> u8vec1;$/;"	t	namespace:glm
u8vec1	glm/gtx/number_precision.hpp	/^	typedef u8			u8vec1;		\/\/!< \\brief 8bit unsigned integer scalar. (from GLM_GTX_number_precision extension)$/;"	t	namespace:glm::gtx
u8vec2	glm/gtc/type_precision.hpp	/^	typedef detail::tvec2<u8> u8vec2;$/;"	t	namespace:glm
u8vec3	glm/gtc/type_precision.hpp	/^	typedef detail::tvec3<u8> u8vec3;$/;"	t	namespace:glm
u8vec4	glm/gtc/type_precision.hpp	/^	typedef detail::tvec4<u8> u8vec4;$/;"	t	namespace:glm
uif	glm/core/_detail.hpp	/^	typedef uif32 uif;$/;"	t	namespace:glm::detail
uif32	glm/core/_detail.hpp	/^		GLM_FUNC_QUALIFIER uif32() :$/;"	f	union:glm::detail::uif32
uif32	glm/core/_detail.hpp	/^		GLM_FUNC_QUALIFIER uif32(float f) :$/;"	f	union:glm::detail::uif32
uif32	glm/core/_detail.hpp	/^		GLM_FUNC_QUALIFIER uif32(unsigned int i) :$/;"	f	union:glm::detail::uif32
uif32	glm/core/_detail.hpp	/^	union uif32$/;"	u	namespace:glm::detail
uif64	glm/core/_detail.hpp	/^		GLM_FUNC_QUALIFIER uif64() :$/;"	f	union:glm::detail::uif64
uif64	glm/core/_detail.hpp	/^		GLM_FUNC_QUALIFIER uif64(double f) :$/;"	f	union:glm::detail::uif64
uif64	glm/core/_detail.hpp	/^		GLM_FUNC_QUALIFIER uif64(uint64 i) :$/;"	f	union:glm::detail::uif64
uif64	glm/core/_detail.hpp	/^	union uif64$/;"	u	namespace:glm::detail
uint	glm/core/type_int.hpp	/^	typedef uint_t								uint;$/;"	t	namespace:glm
uint16	glm/core/_detail.hpp	/^	typedef unsigned short						uint16;$/;"	t	namespace:glm::detail
uint16	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 uint16;$/;"	t	namespace:glm
uint16_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 uint16_t;$/;"	t	namespace:glm
uint32	glm/core/_detail.hpp	/^	typedef unsigned int						uint32;$/;"	t	namespace:glm::detail
uint32	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 uint32;$/;"	t	namespace:glm
uint32_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 uint32_t;$/;"	t	namespace:glm
uint64	glm/core/_detail.hpp	/^	__extension__ typedef unsigned long long	uint64;$/;"	t	namespace:glm::detail
uint64	glm/core/_detail.hpp	/^	typedef Uint64								uint64;$/;"	t	namespace:glm::detail
uint64	glm/core/_detail.hpp	/^	typedef detail::uint64						uint64;$/;"	t	namespace:glm::detail
uint64	glm/core/_detail.hpp	/^	typedef uint64_t							uint64;$/;"	t	namespace:glm::detail
uint64	glm/core/_detail.hpp	/^	typedef unsigned __int64					uint64;$/;"	t	namespace:glm::detail
uint64	glm/core/_detail.hpp	/^	typedef unsigned long long					uint64;$/;"	t	namespace:glm::detail
uint64	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 uint64;$/;"	t	namespace:glm
uint64_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 uint64_t;$/;"	t	namespace:glm
uint8	glm/core/_detail.hpp	/^	typedef unsigned char						uint8;$/;"	t	namespace:glm::detail
uint8	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 uint8;$/;"	t	namespace:glm
uint8_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 uint8_t;$/;"	t	namespace:glm
uint_t	glm/core/type_int.hpp	/^	typedef highp_uint					uint_t;$/;"	t	namespace:glm
uint_t	glm/core/type_int.hpp	/^	typedef lowp_uint					uint_t;$/;"	t	namespace:glm
uint_t	glm/core/type_int.hpp	/^	typedef mediump_uint				uint_t;$/;"	t	namespace:glm
umat2	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2								umat2;$/;"	t	namespace:glm
umat2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2								umat2;$/;"	t	namespace:glm
umat2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2							umat2;$/;"	t	namespace:glm
umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x2							umat2x2;$/;"	t	namespace:glm
umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x2							umat2x2;$/;"	t	namespace:glm
umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x2							umat2x2;$/;"	t	namespace:glm
umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x3							umat2x3;$/;"	t	namespace:glm
umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x3							umat2x3;$/;"	t	namespace:glm
umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x3							umat2x3;$/;"	t	namespace:glm
umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x4							umat2x4;$/;"	t	namespace:glm
umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x4							umat2x4;$/;"	t	namespace:glm
umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x4							umat2x4;$/;"	t	namespace:glm
umat3	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3								umat3;$/;"	t	namespace:glm
umat3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3								umat3;$/;"	t	namespace:glm
umat3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3							umat3;$/;"	t	namespace:glm
umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x2							umat3x2;$/;"	t	namespace:glm
umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x2							umat3x2;$/;"	t	namespace:glm
umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x2							umat3x2;$/;"	t	namespace:glm
umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x3							umat3x3;$/;"	t	namespace:glm
umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x3							umat3x3;$/;"	t	namespace:glm
umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x3							umat3x3;$/;"	t	namespace:glm
umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x4							umat3x4;$/;"	t	namespace:glm
umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x4							umat3x4;$/;"	t	namespace:glm
umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x4							umat3x4;$/;"	t	namespace:glm
umat4	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4								umat4;$/;"	t	namespace:glm
umat4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4								umat4;$/;"	t	namespace:glm
umat4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4							umat4;$/;"	t	namespace:glm
umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x2							umat4x2;$/;"	t	namespace:glm
umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x2							umat4x2;$/;"	t	namespace:glm
umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x2							umat4x2;$/;"	t	namespace:glm
umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x3							umat4x3;$/;"	t	namespace:glm
umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x3							umat4x3;$/;"	t	namespace:glm
umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x3							umat4x3;$/;"	t	namespace:glm
umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x4							umat4x4;$/;"	t	namespace:glm
umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x4							umat4x4;$/;"	t	namespace:glm
umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x4							umat4x4;$/;"	t	namespace:glm
up	rendering/BaseCamera.hpp	/^        vec3 up;$/;"	m	class:rendering::BaseCamera
updateBackground	tracking/ARDrawingContext.cpp	/^void ARDrawingContext::updateBackground(const cv::Mat& frame)$/;"	f	class:ARDrawingContext
updateTextureData	rendering/Sprite.cpp	/^    void Sprite::updateTextureData(cv::Mat& _tex) {$/;"	f	class:rendering::Sprite
updateWindow	tracking/ARDrawingContext.cpp	/^void ARDrawingContext::updateWindow()$/;"	f	class:ARDrawingContext
useShadows	rendering/RenderingManager.hpp	/^        bool useShadows;$/;"	m	class:rendering::RenderingManager
usingCustomProjectionMatrix	rendering/BaseCamera.hpp	/^        bool usingCustomProjectionMatrix;$/;"	m	class:rendering::BaseCamera
usingCustomViewMatrix	rendering/BaseCamera.hpp	/^        bool usingCustomViewMatrix;$/;"	m	class:rendering::BaseCamera
uvAttribute	rendering/Sprite.hpp	/^        GLint uvAttribute;$/;"	m	class:rendering::Sprite
uvec1	glm/gtx/vec1.hpp	/^	typedef highp_uvec1			uvec1;$/;"	t	namespace:glm
uvec1	glm/gtx/vec1.hpp	/^	typedef lowp_uvec1			uvec1;$/;"	t	namespace:glm
uvec1	glm/gtx/vec1.hpp	/^	typedef mediump_uvec1		uvec1;$/;"	t	namespace:glm
uvec2	glm/core/type.hpp	/^	typedef highp_uvec2			uvec2;$/;"	t	namespace:glm
uvec2	glm/core/type.hpp	/^	typedef lowp_uvec2			uvec2;$/;"	t	namespace:glm
uvec2	glm/core/type.hpp	/^	typedef mediump_uvec2		uvec2;$/;"	t	namespace:glm
uvec3	glm/core/type.hpp	/^	typedef highp_uvec3			uvec3;$/;"	t	namespace:glm
uvec3	glm/core/type.hpp	/^	typedef lowp_uvec3			uvec3;$/;"	t	namespace:glm
uvec3	glm/core/type.hpp	/^	typedef mediump_uvec3		uvec3;$/;"	t	namespace:glm
uvec4	glm/core/type.hpp	/^	typedef highp_uvec4			uvec4;$/;"	t	namespace:glm
uvec4	glm/core/type.hpp	/^	typedef lowp_uvec4			uvec4;$/;"	t	namespace:glm
uvec4	glm/core/type.hpp	/^	typedef mediump_uvec4		uvec4;$/;"	t	namespace:glm
uvs	rendering/Mesh.hpp	/^        vector<vec2> uvs;$/;"	m	class:rendering::Mesh
uvs	rendering/Sprite.hpp	/^        vector<vec2> uvs;$/;"	m	class:rendering::Sprite
value	glm/core/type_mat2x2.hpp	/^		col_type value[2];$/;"	m	struct:glm::detail::tmat2x2
value	glm/core/type_mat2x3.hpp	/^		col_type value[2];$/;"	m	struct:glm::detail::tmat2x3
value	glm/core/type_mat2x4.hpp	/^		col_type value[2];$/;"	m	struct:glm::detail::tmat2x4
value	glm/core/type_mat3x2.hpp	/^		col_type value[3];$/;"	m	struct:glm::detail::tmat3x2
value	glm/core/type_mat3x3.hpp	/^		col_type value[3];$/;"	m	struct:glm::detail::tmat3x3
value	glm/core/type_mat3x4.hpp	/^		col_type value[3];$/;"	m	struct:glm::detail::tmat3x4
value	glm/core/type_mat4x2.hpp	/^		col_type value[4];$/;"	m	struct:glm::detail::tmat4x2
value	glm/core/type_mat4x3.hpp	/^		col_type value[4];$/;"	m	struct:glm::detail::tmat4x3
value	glm/core/type_mat4x4.hpp	/^		col_type value[4];$/;"	m	struct:glm::detail::tmat4x4
value_address	glm/core/type_gentype.hpp	/^		value_const_pointer value_address() const{return value_pointer(this);}$/;"	f	struct:glm::detail::genType
value_address	glm/core/type_gentype.hpp	/^		value_pointer value_address(){return value_pointer(this);}$/;"	f	struct:glm::detail::genType
value_const_pointer	glm/core/type_gentype.hpp	/^		typedef VALTYPE const * value_const_pointer;$/;"	t	struct:glm::detail::genType
value_pointer	glm/core/type_gentype.hpp	/^		typedef VALTYPE * value_pointer;$/;"	t	struct:glm::detail::genType
value_reference	glm/core/type_gentype.hpp	/^		typedef VALTYPE & value_reference;$/;"	t	struct:glm::detail::genType
value_type	glm/core/_swizzle.hpp	/^		typedef T       value_type;$/;"	t	struct:glm::detail::_swizzle_base0
value_type	glm/core/_swizzle.hpp	/^		typedef ValueType       value_type;$/;"	t	struct:glm::detail::_swizzle_base2
value_type	glm/core/_swizzle.hpp	/^		typedef ValueType value_type;$/;"	t	struct:glm::detail::_swizzle_base2
value_type	glm/core/type_gentype.hpp	/^		typedef VALTYPE value_type;$/;"	t	struct:glm::detail::genType
value_type	glm/core/type_mat2x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tmat2x2
value_type	glm/core/type_mat2x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tmat2x3
value_type	glm/core/type_mat2x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tmat2x4
value_type	glm/core/type_mat3x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tmat3x2
value_type	glm/core/type_mat3x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tmat3x3
value_type	glm/core/type_mat3x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tmat3x4
value_type	glm/core/type_mat4x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tmat4x2
value_type	glm/core/type_mat4x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tmat4x3
value_type	glm/core/type_mat4x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tmat4x4
value_type	glm/core/type_vec1.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tvec1
value_type	glm/core/type_vec2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tvec2
value_type	glm/core/type_vec3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tvec3
value_type	glm/core/type_vec4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tvec4
value_type	glm/gtc/half_float.hpp	/^		typedef half value_type;$/;"	t	struct:glm::detail::tvec2
value_type	glm/gtc/half_float.hpp	/^		typedef half value_type;$/;"	t	struct:glm::detail::tvec3
value_type	glm/gtc/half_float.hpp	/^		typedef half value_type;$/;"	t	struct:glm::detail::tvec4
value_type	glm/gtc/quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::detail::tquat
vaoIdx	rendering/Mesh.hpp	/^        GLuint vaoIdx;$/;"	m	class:rendering::Mesh
vaoIdx	rendering/Sprite.hpp	/^        GLuint vaoIdx;$/;"	m	class:rendering::Sprite
vec1	glm/gtx/vec1.hpp	/^	typedef highp_vec1			vec1;$/;"	t	namespace:glm
vec1	glm/gtx/vec1.hpp	/^	typedef lowp_vec1			vec1;$/;"	t	namespace:glm
vec1	glm/gtx/vec1.hpp	/^	typedef mediump_vec1			vec1;$/;"	t	namespace:glm
vec2	glm/core/type.hpp	/^	typedef highp_vec2          vec2;$/;"	t	namespace:glm
vec3	glm/core/type.hpp	/^	typedef highp_vec3          vec3;$/;"	t	namespace:glm
vec4	glm/core/type.hpp	/^	typedef highp_vec4          vec4;$/;"	t	namespace:glm
vec_type	glm/core/_swizzle.hpp	/^		typedef VecType         vec_type;        $/;"	t	struct:glm::detail::_swizzle_base2
vec_type	glm/core/_swizzle.hpp	/^		typedef VecType vec_type;$/;"	t	struct:glm::detail::_swizzle_base2
vertexAttribute	rendering/Mesh.hpp	/^        GLint vertexAttribute;$/;"	m	class:rendering::Mesh
vertexAttribute	rendering/Sprite.hpp	/^        GLint vertexAttribute;$/;"	m	class:rendering::Sprite
vertexBuffer	rendering/Mesh.hpp	/^        GLuint vertexBuffer;$/;"	m	class:rendering::Mesh
vertexBuffer	rendering/Sprite.hpp	/^        GLuint vertexBuffer;$/;"	m	class:rendering::Sprite
vertexShaderId	rendering/BaseShader.hpp	/^        GLuint vertexShaderId;$/;"	m	class:rendering::BaseShader
vertices	rendering/Mesh.hpp	/^        vector<vec3> vertices;$/;"	m	class:rendering::Mesh
vertices	rendering/Sprite.hpp	/^        vector<vec2> vertices;$/;"	m	class:rendering::Sprite
videoCaptureFunc	tst/irrlicht_render.cpp	/^void videoCaptureFunc( cv::Mat& _frame )$/;"	f
view	tst/main.cpp	/^    mat4 view;$/;"	m	class:IlluminationWindow	file:
view	tst/tst-render.cpp	/^		mat4 view;$/;"	m	class:IlluminationWindow	file:
viewMatLoc	rendering/Mesh.hpp	/^        GLuint viewMatLoc;$/;"	m	class:rendering::Mesh
viewMatLoc	rendering/Sprite.hpp	/^        GLuint viewMatLoc;$/;"	m	class:rendering::Sprite
viewMatrix	rendering/BaseCamera.hpp	/^        mat4 viewMatrix;$/;"	m	class:rendering::BaseCamera
viewportSize	rendering/RenderingManager.hpp	/^        glm::vec2 viewportSize;$/;"	m	class:rendering::RenderingManager
visibilities	rendering/Mesh.hpp	/^        vector<float> visibilities;$/;"	m	class:rendering::Mesh
visibilityAttribute	rendering/Mesh.hpp	/^        GLint visibilityAttribute;$/;"	m	class:rendering::Mesh
visibilityBuffer	rendering/Mesh.hpp	/^        GLuint visibilityBuffer;$/;"	m	class:rendering::Mesh
w	glm/core/type_vec4.hpp	/^			struct{value_type x, y, z, w;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon13
w	glm/core/type_vec4.hpp	/^		T & w;$/;"	m	struct:glm::detail::tref4
w	glm/core/type_vec4.hpp	/^		union {value_type w, a, q;};$/;"	m	union:glm::detail::tvec4::__anon17
w	glm/gtc/half_float.hpp	/^		half x, y, z, w;$/;"	m	struct:glm::detail::tvec4
w	glm/gtc/quaternion.hpp	/^		value_type x, y, z, w;$/;"	m	struct:glm::detail::tquat
width	rendering/RenderingWindow.hpp	/^			int width;$/;"	m	class:rendering::RenderingWindow
windowName	rendering/RenderingWindow.hpp	/^			std::string windowName;$/;"	m	class:rendering::RenderingWindow
word	glm/gtx/raw_data.hpp	/^	typedef uint16		word;$/;"	t	namespace:glm
x	glm/core/type_vec1.hpp	/^			union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec1::__anon24
x	glm/core/type_vec1.hpp	/^			value_type x;$/;"	m	struct:glm::detail::tvec1
x	glm/core/type_vec1.hpp	/^		T& x;$/;"	m	struct:glm::detail::tref1
x	glm/core/type_vec2.hpp	/^			struct{value_type x, y;};$/;"	m	struct:glm::detail::tvec2::__anon18::__anon21
x	glm/core/type_vec2.hpp	/^		T & x;$/;"	m	struct:glm::detail::tref2
x	glm/core/type_vec2.hpp	/^		union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec2::__anon22
x	glm/core/type_vec3.hpp	/^			struct{value_type x, y, z;};$/;"	m	struct:glm::detail::tvec3::__anon3::__anon6
x	glm/core/type_vec3.hpp	/^		T & x;$/;"	m	struct:glm::detail::tref3
x	glm/core/type_vec3.hpp	/^		union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec3::__anon7
x	glm/core/type_vec4.hpp	/^			struct{value_type x, y, z, w;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon13
x	glm/core/type_vec4.hpp	/^		T & x;$/;"	m	struct:glm::detail::tref4
x	glm/core/type_vec4.hpp	/^		union {value_type x, r, s;};$/;"	m	union:glm::detail::tvec4::__anon14
x	glm/gtc/half_float.hpp	/^		half x, y, z, w;$/;"	m	struct:glm::detail::tvec4
x	glm/gtc/half_float.hpp	/^		half x, y, z;$/;"	m	struct:glm::detail::tvec3
x	glm/gtc/half_float.hpp	/^		half x, y;$/;"	m	struct:glm::detail::tvec2
x	glm/gtc/quaternion.hpp	/^		value_type x, y, z, w;$/;"	m	struct:glm::detail::tquat
y	glm/core/type_vec2.hpp	/^			struct{value_type x, y;};$/;"	m	struct:glm::detail::tvec2::__anon18::__anon21
y	glm/core/type_vec2.hpp	/^		T & y;$/;"	m	struct:glm::detail::tref2
y	glm/core/type_vec2.hpp	/^		union {value_type y, g, t;};$/;"	m	union:glm::detail::tvec2::__anon23
y	glm/core/type_vec3.hpp	/^			struct{value_type x, y, z;};$/;"	m	struct:glm::detail::tvec3::__anon3::__anon6
y	glm/core/type_vec3.hpp	/^		T & y;$/;"	m	struct:glm::detail::tref3
y	glm/core/type_vec3.hpp	/^		union {value_type y, g, t;};$/;"	m	union:glm::detail::tvec3::__anon8
y	glm/core/type_vec4.hpp	/^			struct{value_type x, y, z, w;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon13
y	glm/core/type_vec4.hpp	/^		T & y;$/;"	m	struct:glm::detail::tref4
y	glm/core/type_vec4.hpp	/^		union {value_type y, g, t;};$/;"	m	union:glm::detail::tvec4::__anon15
y	glm/gtc/half_float.hpp	/^		half x, y, z, w;$/;"	m	struct:glm::detail::tvec4
y	glm/gtc/half_float.hpp	/^		half x, y, z;$/;"	m	struct:glm::detail::tvec3
y	glm/gtc/half_float.hpp	/^		half x, y;$/;"	m	struct:glm::detail::tvec2
y	glm/gtc/quaternion.hpp	/^		value_type x, y, z, w;$/;"	m	struct:glm::detail::tquat
z	glm/core/type_vec3.hpp	/^			struct{value_type x, y, z;};$/;"	m	struct:glm::detail::tvec3::__anon3::__anon6
z	glm/core/type_vec3.hpp	/^		T & z;$/;"	m	struct:glm::detail::tref3
z	glm/core/type_vec3.hpp	/^		union {value_type z, b, p;};$/;"	m	union:glm::detail::tvec3::__anon9
z	glm/core/type_vec4.hpp	/^			struct{value_type x, y, z, w;};$/;"	m	struct:glm::detail::tvec4::__anon10::__anon13
z	glm/core/type_vec4.hpp	/^		T & z;$/;"	m	struct:glm::detail::tref4
z	glm/core/type_vec4.hpp	/^		union {value_type z, b, p;};$/;"	m	union:glm::detail::tvec4::__anon16
z	glm/gtc/half_float.hpp	/^		half x, y, z, w;$/;"	m	struct:glm::detail::tvec4
z	glm/gtc/half_float.hpp	/^		half x, y, z;$/;"	m	struct:glm::detail::tvec3
z	glm/gtc/quaternion.hpp	/^		value_type x, y, z, w;$/;"	m	struct:glm::detail::tquat
zero	tracking/GeometryTypes.cpp	/^Vector3 Vector3::zero()$/;"	f	class:Vector3
~ARDrawingContext	tracking/ARDrawingContext.cpp	/^ARDrawingContext::~ARDrawingContext()$/;"	f	class:ARDrawingContext
~BaseShader	rendering/BaseShader.cpp	/^	BaseShader::~BaseShader()$/;"	f	class:rendering::BaseShader
~MarkerMesh	rendering/MarkerMesh.cpp	/^    MarkerMesh::~MarkerMesh() {$/;"	f	class:rendering::MarkerMesh
~Mesh	rendering/Mesh.cpp	/^    Mesh::~Mesh() {$/;"	f	class:rendering::Mesh
~RenderableObject	rendering/RenderableObject.cpp	/^	RenderableObject::~RenderableObject()$/;"	f	class:rendering::RenderableObject
~RenderingManager	rendering/RenderingManager.cpp	/^    RenderingManager::~RenderingManager() {$/;"	f	class:rendering::RenderingManager
~Sprite	rendering/Sprite.cpp	/^    Sprite::~Sprite() {$/;"	f	class:rendering::Sprite
